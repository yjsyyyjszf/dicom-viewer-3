{"ast":null,"code":"var _jsxFileName = \"/media/mohammad/work/websites/cornerstone/dicom-viewer/src/components/OpenMultipleFilesDlg.js\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport * as cornerstone from \"cornerstone-core\";\nimport * as cornerstoneWADOImageLoader from \"cornerstone-wado-image-loader\";\nimport { filesStore } from '../actions';\nimport { getFileNameCorrect } from '../functions';\ncornerstoneWADOImageLoader.external.cornerstone = cornerstone;\n\nclass OpenMultipleFilesDlg extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: 0,\n      cancel: false\n    };\n\n    this.getInstanceNumber = image => {\n      const value = image.data.string('x00200013');\n\n      if (value === undefined) {\n        return;\n      }\n\n      return value;\n    };\n\n    this.getSliceLocation = image => {\n      const value = image.data.string('x00201041');\n\n      if (value === undefined) {\n        return;\n      }\n\n      return parseFloat(value);\n    };\n\n    this.getRows = image => {\n      const value = image.data.uint16('x00280010');\n\n      if (value === undefined) {\n        return;\n      }\n\n      return value;\n    };\n\n    this.getColumns = image => {\n      const value = image.data.uint16('x00280011');\n\n      if (value === undefined) {\n        return;\n      }\n\n      return value;\n    };\n\n    this.getSliceDistance = image => {\n      try {\n        const ipp = image.data.string('x00200032').split('\\\\'); // Image Position Patient\n        //console.log(\"imagePosition: \", ipp)\n\n        let topLeftCorner = new Array(3).fill(0);\n        topLeftCorner[0] = parseFloat(ipp[0]); // X pos of frame (Top left) in real space\n\n        topLeftCorner[1] = parseFloat(ipp[1]); // Y pos of frame (Top left) in real space\n\n        topLeftCorner[2] = parseFloat(ipp[2]); // Z pos of frame (Top left) in real space\n        //console.log(\"topLeftCorner: \", topLeftCorner)\n\n        const iop = image.data.string('x00200037').split('\\\\'); // Image Orientation Patient\n        //console.log(\"values: \", iop)\n\n        let v = new Array(3).fill(0).map(() => new Array(3).fill(0));\n        v[0][0] = parseFloat(iop[0]); // the x direction cosines of the first row X\n\n        v[0][1] = parseFloat(iop[1]); // the y direction cosines of the first row X\n\n        v[0][2] = parseFloat(iop[2]); // the z direction cosines of the first row X\n\n        v[1][0] = parseFloat(iop[3]); // the x direction cosines of the first column Y\n\n        v[1][1] = parseFloat(iop[4]); // the y direction cosines of the first column Y\n\n        v[1][2] = parseFloat(iop[5]); // the z direction cosines of the first column Y \n        //console.log(\"v: \", v)\n        // calculate the slice normal from IOP\n\n        v[2][0] = v[0][1] * v[1][2] - v[0][2] * v[1][1];\n        v[2][1] = v[0][2] * v[1][0] - v[0][0] * v[1][2];\n        v[2][2] = v[0][0] * v[1][1] - v[0][1] * v[1][0];\n        let dist = 0;\n\n        for (let i = 0; i < 3; ++i) dist += v[2][i] * topLeftCorner[i];\n\n        return dist;\n      } catch (error) {\n        return 0;\n      }\n    };\n\n    this.close = () => {\n      //console.log('this.slicesDistance: ', this.slicesDistance)\n      this.props.onClose();\n    };\n\n    this.cancel = () => {\n      this.setState({\n        cancel: true\n      });\n    };\n\n    this.items = [];\n    this.count = 0;\n    this.step = 0; //this.slicesDistance = []\n  }\n\n  componentDidMount() {\n    this.step = this.props.files.length / 50;\n    this.nextProgress = this.step;\n    this.t0 = performance.now();\n\n    for (let i = 0; i < this.props.files.length; i++) {\n      const file = this.props.files[i];\n\n      if (this.state.cancel) {\n        this.props.setFilesStore(null);\n        this.close();\n        return;\n      }\n\n      let imageId = null;\n      if (this.props.origin === 'local') imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add(file);else // it's fs item\n        imageId = cornerstoneWADOImageLoader.wadouri.fileManager.addBuffer(file.data);\n      cornerstone.loadImage(imageId).then(image => {\n        //console.log('image: ', image)\n        //try {\n        const instanceNumber = this.getInstanceNumber(image);\n        const sliceDistance = this.getSliceDistance(image);\n        const sliceLocation = this.getSliceLocation(image); //this.slicesDistance.push(sliceDistance)\n        //console.log('sliceDistance: ', sliceDistance)\n\n        let item = null;\n        if (this.props.origin === 'local') item = {\n          imageId: imageId,\n          instanceNumber: instanceNumber,\n          name: getFileNameCorrect(file.name),\n          image: image,\n          rows: this.getRows(image),\n          columns: this.getColumns(image),\n          sliceDistance: sliceDistance,\n          sliceLocation: sliceLocation\n        };else item = {\n          imageId: imageId,\n          instanceNumber: instanceNumber,\n          name: file.name,\n          image: image,\n          rows: this.getRows(image),\n          columns: this.getColumns(image),\n          sliceDistance: sliceDistance,\n          sliceLocation: sliceLocation\n        };\n        this.items.push(item);\n        this.count++; //} catch(error) {\n        //  console.log('Error in reading multiple files: ', file)\n        //}\n        //console.log('this.count: ', this.count)\n\n        const progress = Math.floor(this.count * (100 / this.props.files.length)); //\n\n        if (progress > this.nextProgress) {\n          this.nextProgress += this.step;\n          this.setState({\n            progress: progress\n          });\n        }\n\n        if (this.count === this.props.files.length) {\n          this.items.sort((l, r) => {\n            return l.instanceNumber - r.instanceNumber; // return l.sliceDistance - r.sliceDistance\n            //return l.sliceLocation - r.sliceLocation\n          });\n          this.t1 = performance.now();\n          console.log(`performance load image: ${this.t1 - this.t0} milliseconds`);\n          this.props.setFilesStore(this.items);\n          this.close();\n        }\n      }, e => {\n        console.log('Error in reading multiple files: ', e);\n        this.count++;\n      });\n\n      if (this.count === this.props.files.length) {\n        this.close();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      open: true,\n      onClose: this.close,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"alert-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Opening multiple files ...\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(LinearProgress, {\n      variant: \"determinate\",\n      value: this.state.progress,\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.cancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Cancel\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setFilesStore: files => dispatch(filesStore(files))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(OpenMultipleFilesDlg);","map":{"version":3,"sources":["/media/mohammad/work/websites/cornerstone/dicom-viewer/src/components/OpenMultipleFilesDlg.js"],"names":["React","PureComponent","connect","Button","Dialog","DialogActions","DialogContent","DialogTitle","LinearProgress","cornerstone","cornerstoneWADOImageLoader","filesStore","getFileNameCorrect","external","OpenMultipleFilesDlg","constructor","props","state","progress","cancel","getInstanceNumber","image","value","data","string","undefined","getSliceLocation","parseFloat","getRows","uint16","getColumns","getSliceDistance","ipp","split","topLeftCorner","Array","fill","iop","v","map","dist","i","error","close","onClose","setState","items","count","step","componentDidMount","files","length","nextProgress","t0","performance","now","file","setFilesStore","imageId","origin","wadouri","fileManager","add","addBuffer","loadImage","then","instanceNumber","sliceDistance","sliceLocation","item","name","rows","columns","push","Math","floor","sort","l","r","t1","console","log","e","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport {connect} from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport * as cornerstone from \"cornerstone-core\"\nimport * as cornerstoneWADOImageLoader from \"cornerstone-wado-image-loader\"\nimport {\n  filesStore,\n} from '../actions'\nimport { \n  getFileNameCorrect,\n} from '../functions'\n\ncornerstoneWADOImageLoader.external.cornerstone = cornerstone\n\nclass OpenMultipleFilesDlg extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.items = []\n    this.count = 0\n    this.step = 0\n    //this.slicesDistance = []\n  }\n\n  state = {\n    progress: 0,\n    cancel: false,\n  }  \n\n  componentDidMount() {\n    this.step = this.props.files.length / 50\n    this.nextProgress = this.step\n    this.t0 = performance.now()\n\n    for (let i=0; i<this.props.files.length; i++) {\n      const file = this.props.files[i]\n      if (this.state.cancel) {\n        this.props.setFilesStore(null)\n        this.close()\n        return\n      }\n      let imageId = null \n      \n      if (this.props.origin === 'local')\n        imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add(file)\n      else // it's fs item\n        imageId = cornerstoneWADOImageLoader.wadouri.fileManager.addBuffer(file.data)  \n\n      cornerstone.loadImage(imageId).then((image) => {\n        //console.log('image: ', image)\n        //try {\n          const instanceNumber = this.getInstanceNumber(image)\n          const sliceDistance = this.getSliceDistance(image)\n          const sliceLocation = this.getSliceLocation(image)         \n\n          //this.slicesDistance.push(sliceDistance)\n          //console.log('sliceDistance: ', sliceDistance)\n  \n          let item = null\n          if (this.props.origin === 'local')\n            item = {\n              imageId: imageId, \n              instanceNumber: instanceNumber, \n              name: getFileNameCorrect(file.name), \n              image: image, \n              rows: this.getRows(image), \n              columns: this.getColumns(image), \n              sliceDistance: sliceDistance,\n              sliceLocation: sliceLocation,\n            }\n          else\n            item = {\n              imageId: imageId, \n              instanceNumber: instanceNumber, \n              name: file.name, \n              image: image, \n              rows: this.getRows(image), \n              columns: this.getColumns(image), \n              sliceDistance: sliceDistance,\n              sliceLocation: sliceLocation,            \n            }\n          this.items.push(item)\n          this.count++\n        //} catch(error) {\n        //  console.log('Error in reading multiple files: ', file)\n        //}\n        //console.log('this.count: ', this.count)\n        const progress = Math.floor(this.count*(100/this.props.files.length))\n        //\n        if (progress > this.nextProgress) {\n          this.nextProgress += this.step\n          this.setState({progress: progress})\n        }\n        if (this.count === this.props.files.length) {\n          this.items.sort((l, r) => {\n            return l.instanceNumber - r.instanceNumber\n            // return l.sliceDistance - r.sliceDistance\n            //return l.sliceLocation - r.sliceLocation\n          })\n          this.t1 = performance.now()\n          console.log(`performance load image: ${this.t1-this.t0} milliseconds`)\n          this.props.setFilesStore(this.items)\n          this.close()\n        }\n\t\t\t}, (e) => {\n        console.log('Error in reading multiple files: ', e)\n        this.count++\n      })\n      if (this.count === this.props.files.length) {\n        this.close()\n      }   \n    }\n\n  }\n  \n  getInstanceNumber = (image) => {\n\t\tconst value = image.data.string('x00200013')\n\t\tif (value === undefined) {\n\t\t\treturn\n\t\t}\n\t\treturn value\n  }\t\n\n  getSliceLocation = (image) => {\n\t\tconst value = image.data.string('x00201041')\n\t\tif (value === undefined) {\n\t\t\treturn\n\t\t}\n\t\treturn parseFloat(value)\n  }\t\n\n  getRows = (image) => {\n    const value = image.data.uint16('x00280010')\n\t\tif (value === undefined) {\n\t\t\treturn\n\t\t}\n\t\treturn value    \n  }\n\n  getColumns = (image) => {\n    const value = image.data.uint16('x00280011')\n\t\tif (value === undefined) {\n\t\t\treturn\n\t\t}\n\t\treturn value    \n  }  \n\n  // see https://stackoverflow.com/questions/37730772/get-distance-between-slices-in-dicom\n  //\n  getSliceDistance = (image) => {\n    try {\n      const ipp = image.data.string('x00200032').split('\\\\') // Image Position Patient\n      //console.log(\"imagePosition: \", ipp)\n      let topLeftCorner = new Array(3).fill(0)\n      topLeftCorner[0] = parseFloat(ipp[0]) // X pos of frame (Top left) in real space\n      topLeftCorner[1] = parseFloat(ipp[1]) // Y pos of frame (Top left) in real space\n      topLeftCorner[2] = parseFloat(ipp[2]) // Z pos of frame (Top left) in real space\n      //console.log(\"topLeftCorner: \", topLeftCorner)\n\n      const iop = image.data.string('x00200037').split('\\\\') // Image Orientation Patient\n      //console.log(\"values: \", iop)\n      let v = new Array(3).fill(0).map(() => new Array(3).fill(0))\n\n      v[0][0] = parseFloat(iop[0]) // the x direction cosines of the first row X\n      v[0][1] = parseFloat(iop[1]) // the y direction cosines of the first row X\n      v[0][2] = parseFloat(iop[2]) // the z direction cosines of the first row X\n      v[1][0] = parseFloat(iop[3]) // the x direction cosines of the first column Y\n      v[1][1] = parseFloat(iop[4]) // the y direction cosines of the first column Y\n      v[1][2] = parseFloat(iop[5]) // the z direction cosines of the first column Y \n\n      //console.log(\"v: \", v)\n\n      // calculate the slice normal from IOP\n      v[2][0] = v[0][1] * v[1][2] - v[0][2] * v[1][1]\n      v[2][1] = v[0][2] * v[1][0] - v[0][0] * v[1][2]\n      v[2][2] = v[0][0] * v[1][1] - v[0][1] * v[1][0]\n      \n      let dist = 0\n      for (let i = 0; i < 3; ++i) \n        dist += v[2][i] * topLeftCorner[i]\n        \n      return dist\n    } catch(error) {\n      return 0\n    }\n  }\n\n  \n  close = () => {\n    //console.log('this.slicesDistance: ', this.slicesDistance)\n    this.props.onClose()\n  }\n\n  cancel = () => {\n    this.setState({cancel: true}) \n  }\n\n  render() {\n    return (\n      <div>\n        <Dialog\n            open={true}\n            onClose={this.close}\n            aria-labelledby=\"alert-dialog-title\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"Opening multiple files ...\"}</DialogTitle>\n            <DialogContent>\n              <LinearProgress variant=\"determinate\" value={this.state.progress} color='secondary' />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={this.cancel}>\n                    Cancel\n                </Button>\n            </DialogActions>\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      setFilesStore: (files) => dispatch(filesStore(files)),\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(OpenMultipleFilesDlg)\n"]},"metadata":{},"sourceType":"module"}