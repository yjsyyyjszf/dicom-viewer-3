{"ast":null,"code":"var _jsxFileName = \"E:\\\\private\\\\projects\\\\udv\\\\u-dicom-viewer-master-1\\\\u-dicom-viewer-master\\\\src\\\\components\\\\FsUI.js\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Icon from '@mdi/react';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography'; // import {List as ListVirtual} from 'react-virtualized'\n\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\nimport fs from '../fs/fs';\nimport OpenMultipleFilesDlg from './OpenMultipleFilesDlg';\nimport { getFileExt, getFileExtReal, getFileName, formatBytes, getSettingsFsView, getFileNameCorrect } from '../functions';\nimport { //setFsCurrentId,\nsetFsCurrentDir, setFsCurrentList, setZippedFile, fsFileStore } from '../actions';\nimport { mdiCheck, mdiChevronLeft, mdiClose, mdiContentCopy, mdiContentCut, mdiContentPaste, mdiContentSaveOutline, mdiDeleteOutline, mdiDotsHorizontal, mdiExportVariant, mdiFolderOutline, mdiFolderPlusOutline, mdiCheckBoxOutline, mdiSquareEditOutline } from '@mdi/js';\n\nconst styles = theme => ({\n  table: {\n    minWidth: 250\n  },\n  toolbarButtons: {\n    marginLeft: 'auto',\n    marginRight: -20\n  },\n  leftButtons: {\n    marginLeft: -25\n  },\n  textPaper: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 250\n  },\n  textInput: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  textButton: {\n    padding: 10\n  }\n});\n\nclass FsUI extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textFieldLabel: '',\n      textFieldValue: '',\n      selected: [],\n      selectedCopy: [],\n      visibleTextField: false,\n      visibleDeleteDlg: false,\n      visibleOthers: false,\n      visibleAlreadyExistDlg: false,\n      visibleOSaveAsDlg: false,\n      visibleWaiting: false,\n      visibleOpenMultipleFilesDlg: false\n    };\n\n    this.doSelectUnselect = () => {\n      let newSelected = [];\n\n      if (this.state.selected.length > 0) {\n        // unselect the files\n        this.setState({\n          selected: newSelected\n        });\n      } else {\n        // select only files not dir\n        this.props.fsCurrentList.forEach(item => {\n          if (item.type !== 'dir') {\n            newSelected.push(item.name);\n          }\n\n          this.setState({\n            selected: newSelected\n          }, () => {//console.log('this.state.selected: ', this.state.selected)\n          });\n        });\n      }\n    };\n\n    this.openSelectedFilesRetrieveItems = async () => {\n      await fs.transaction('r', fs.files, async () => {\n        this.state.selected.forEach(async (name, index) => {\n          await fs.files.where({\n            parent: this.props.fsCurrentDir,\n            name: name\n          }).first(item => {\n            console.log('item: ', item);\n\n            if (item !== undefined && item.type !== 'dir') {\n              this.files.push(item);\n            } else if (item.type === 'dir') {\n              fs.files.where('parent').startsWithIgnoreCase(item.name).each(e => {\n                if (e !== undefined && e.type !== 'dir') {\n                  console.log(' e: ', e);\n                  this.files.push(e);\n                }\n              });\n            }\n          });\n        });\n      });\n    };\n\n    this.openSelectedFiles = () => {\n      if (this.state.selected.length === 0) return;\n      this.files = [];\n      this.openSelectedFilesRetrieveItems().then(() => {\n        console.log('this.files: ', this.files);\n        this.setState({\n          visibleOpenMultipleFilesDlg: true\n        });\n        this.setState({\n          selected: []\n        });\n      });\n    };\n\n    this.hideOpenMultipleFilesDlg = () => {\n      this.setState({\n        visibleOpenMultipleFilesDlg: false\n      });\n\n      if (this.props.files.length > 1) {\n        this.props.onOpenMultipleFilesCompleted();\n      } else this.props.onOpenImage(0);\n    };\n\n    this.createDir = () => {\n      this.setState({\n        textFieldLabel: 'new folder name',\n        visibleTextField: !this.state.visibleTextField\n      });\n    };\n\n    this.renameItem = () => {\n      this.lastSelected = this.state.selected[this.state.selected.length - 1];\n      this.setState({\n        textFieldLabel: '',\n        textFieldValue: this.lastSelected,\n        visibleTextField: !this.state.visibleTextField\n      });\n    };\n\n    this.previousDir = () => {\n      //console.log('this.state.parentDir: ', this.state.parentDir)\n      if (this.props.fsCurrentDir === '') return;\n      const nextDir = this.props.fsCurrentDir.split('/').slice(0, -1).join('/');\n      this.props.setCurrentDir(nextDir);\n      this.fsListDir(nextDir);\n    };\n\n    this.confirmText = e => {\n      if (this.state.textFieldLabel === '') {\n        // it's a rename\n        // check if the new name already exist\n        const check = this.props.fsCurrentList.find(e => e.name === this.state.textFieldValue);\n\n        if (check !== undefined) {\n          this.setState({\n            visibleAlreadyExistDlg: true\n          });\n          return;\n        }\n\n        const item = this.props.fsCurrentList.find(e => e.name === this.lastSelected);\n\n        if (item !== undefined) {\n          if (item.type === 'dir') {\n            const oldParent = this.fsBuildParent(item.parent, item.name);\n            const newParent = this.fsBuildParent(item.parent, this.state.textFieldValue); // rename parent for all subitems\n\n            fs.transaction('rw', fs.files, async () => {\n              await fs.files.where({\n                parent: oldParent\n              }).each(e => {\n                fs.transaction('rw', fs.files, async () => {\n                  // since is a new primary key then add it as new item \n                  await fs.files.add({\n                    parent: newParent,\n                    name: e.name,\n                    type: e.type,\n                    size: e.size,\n                    data: e.data\n                  }).then(() => {\n                    // then delete old one\n                    fs.files.where({\n                      parent: oldParent\n                    }).delete();\n                  });\n                });\n              });\n            });\n          }\n\n          fs.transaction('rw', fs.files, async () => {\n            // a new primary key, add it as new item \n            await fs.files.add({\n              parent: item.parent,\n              name: this.state.textFieldValue,\n              type: item.type,\n              size: item.size,\n              data: item.data\n            }).then(() => {\n              // then delete old one\n              fs.files.where({\n                parent: item.parent,\n                name: item.name\n              }).delete();\n            });\n          });\n          this.setState({\n            visibleTextField: false\n          });\n          this.fsListDir(this.props.fsCurrentDir);\n        }\n      } else {\n        // it's a new directory\n        this.setState({\n          visibleTextField: false\n        }, () => {\n          this.fsCreateDir(this.props.fsCurrentDir, this.state.textFieldValue);\n        });\n      }\n    };\n\n    this.cancelDir = () => {\n      this.setState({\n        visibleTextField: false\n      });\n    };\n\n    this.saveItem = () => {\n      console.log('this.props.localFileStore: ', this.props.localFileStore);\n      console.log('this.props.fsFileStore: ', this.props.fsFileStore); //console.log('this.props.activeDcm: ', this.props.activeDcm)\n\n      if (this.props.localFileStore !== null) {\n        const file = this.props.localFileStore;\n        if (file === null) return;\n        let reader = new FileReader();\n\n        reader.onload = event => {\n          let buffer = event.target.result;\n          const ext = getFileExtReal(file.name); //console.log('ext: ', ext)\n\n          const name = getFileName(getFileNameCorrect(file.name)); //console.log('name: ', name)\n\n          let newName = name;\n          let counter = 0;\n          let done = false;\n\n          do {\n            let filename = ext === '' ? newName : `${newName}.${ext}`;\n            const checkName = this.props.fsCurrentList.find(e => e.name === filename);\n\n            if (checkName === undefined) {\n              fs.transaction('rw', fs.files, async () => {\n                await fs.files.add({\n                  parent: this.props.fsCurrentDir,\n                  name: filename,\n                  type: ext === '' ? getFileExt(name) : ext,\n                  size: file.size,\n                  data: buffer\n                });\n              }).then(() => {\n                this.fsListDir(this.props.fsCurrentDir);\n              });\n              done = true;\n            } else {\n              newName = `${name} - Copy`;\n              if (counter > 0) newName = `${newName} (${counter})`;\n              counter++;\n            }\n          } while (!done);\n        };\n\n        reader.readAsArrayBuffer(file);\n      } else if (this.props.fsFileStore !== null) {\n        const file = this.props.fsFileStore;\n        let buffer = file.data;\n        const ext = getFileExtReal(file.name);\n        const name = getFileName(getFileNameCorrect(file.name));\n        let newName = name;\n        let counter = 0;\n        let done = false;\n\n        do {\n          let filename = ext === '' ? newName : `${newName}.${ext}`;\n          const checkName = this.props.fsCurrentList.find(e => e.name === filename);\n\n          if (checkName === undefined) {\n            fs.transaction('rw', fs.files, async () => {\n              await fs.files.add({\n                parent: this.props.fsCurrentDir,\n                name: filename,\n                type: getFileExt(name),\n                size: file.size,\n                data: buffer\n              });\n            }).then(() => {\n              this.fsListDir(this.props.fsCurrentDir);\n            });\n            done = true;\n          } else {\n            newName = `${name} - Copy`;\n            if (counter > 0) newName = `${newName} (${counter})`;\n            counter++;\n          }\n        } while (!done);\n      }\n    };\n\n    this.copyItem = () => {\n      let newSelectedCopy = [];\n      this.state.selected.forEach(name => {\n        const item = this.props.fsCurrentList.find(e => e.name === name);\n\n        if (item !== undefined) {\n          newSelectedCopy.push({\n            parent: item.parent,\n            name: item.name\n          });\n        }\n      });\n      this.setState({\n        selectedCopy: newSelectedCopy\n      });\n    };\n\n    this.cutItem = () => {\n      let newSelectedCopy = [];\n      this.state.selected.forEach(name => {\n        let item = this.props.fsCurrentList.find(e => e.name === name);\n\n        if (item !== undefined) {\n          newSelectedCopy.push({\n            parent: item.parent,\n            name: item.name\n          });\n        }\n      });\n      this.setState({\n        selectedCopy: newSelectedCopy\n      });\n      this.cut = true;\n    };\n\n    this.pasteItem = () => {\n      //console.log('this.state.selectedCopy: ', this.state.selectedCopy)\n      //console.log('this.props.fsCurrentList: ', this.props.fsCurrentList)\n      this.state.selectedCopy.forEach(async (selected, index) => {\n        await fs.files.where({\n          parent: selected.parent,\n          name: selected.name\n        }).first(item => {\n          if (item !== undefined) {\n            //console.log('item: ', item)\n            if (item.type === 'dir') {\n              // create a new name\n              let counter = 0;\n              let done = false;\n              let newName = item.name;\n\n              do {\n                let filename = newName;\n                const checkName = this.props.fsCurrentList.find(e => e.name === filename);\n\n                if (checkName === undefined) {\n                  done = true;\n                } else {\n                  newName = `${item.name} - Copy`;\n                  if (counter > 0) newName = `${newName} (${counter})`;\n                  counter++;\n                }\n              } while (!done); //console.log('this.props.fsCurrentDir: ', this.props.fsCurrentDir)\n              //console.log('newName: ', newName)\n              // copy the folder\n\n\n              fs.files.add({\n                parent: this.props.fsCurrentDir,\n                name: newName,\n                type: item.type,\n                size: item.size,\n                data: item.data\n              }); // copy all subdirs and files\n\n              const oldParent = this.fsBuildParent(item.parent, item.name);\n              const newParent = this.fsBuildParent(this.props.fsCurrentDir, newName); //console.log('oldParent: ', oldParent)\n              //console.log('newParent: ', newParent)\n\n              let listItems = [];\n              fs.files.where('parent').startsWithIgnoreCase(oldParent).each(e => {\n                listItems.push(e);\n              }).then(() => {\n                listItems.forEach(e => {\n                  //console.log('listItems e: ', e)\n                  //const parent = e.parent.replace(oldParent, newParent)\n                  //console.log('parent: ', parent)\n                  fs.files.add({\n                    parent: newParent,\n                    name: e.name,\n                    type: e.type,\n                    size: e.size,\n                    data: e.data\n                  });\n                });\n              });\n            } else {\n              // it's a file\n              const ext = getFileExtReal(item.name);\n              const name = getFileName(item.name);\n              let newName = name;\n              let counter = 0;\n              let done = false;\n\n              do {\n                let filename = ext === '' ? newName : `${newName}.${ext}`;\n                const checkName = this.props.fsCurrentList.find(e => e.name === filename);\n\n                if (checkName === undefined) {\n                  fs.transaction('rw', fs.files, async () => {\n                    await fs.files.add({\n                      parent: this.props.fsCurrentDir,\n                      name: filename,\n                      type: item.type,\n                      size: item.size,\n                      data: item.data\n                    });\n                  });\n                  done = true;\n                } else {\n                  newName = `${name} - Copy`;\n                  if (counter > 0) newName = `${newName} (${counter})`;\n                  counter++;\n                }\n              } while (!done);\n            }\n          }\n        });\n\n        if (index === this.state.selectedCopy.length - 1) {\n          if (this.cut) {\n            this.state.selectedCopy.forEach(selected => {\n              fs.files.where({\n                parent: selected.parent,\n                name: selected.name\n              }).delete();\n            });\n            this.setState({\n              selectedCopy: []\n            });\n            this.cut = false;\n          }\n\n          this.fsListDir(this.props.fsCurrentDir);\n        }\n      });\n      this.setState({\n        selected: []\n      });\n    };\n\n    this.deleteItem = () => {\n      this.state.selected.forEach(name => {\n        let item = this.props.fsCurrentList.find(e => e.name === name);\n\n        if (item !== undefined) {\n          if (item.type === 'dir') {\n            // delete also all subitems\n            fs.files.where('parent').startsWithIgnoreCase(this.fsBuildParent(item.parent, item.name)).delete();\n          }\n\n          fs.files.where({\n            parent: item.parent,\n            name: item.name\n          }).delete().then(() => {\n            this.fsListDir(this.props.fsCurrentDir);\n          });\n        }\n      });\n      this.setState({\n        selected: []\n      });\n    };\n\n    this.showOthers = () => {\n      this.setState({\n        visibleOthers: !this.state.visibleOthers\n      });\n    };\n\n    this.exportItem = () => {\n      if (this.state.selected.length === 0) return;\n      this.setState({\n        visibleOSaveAsDlg: true\n      });\n    };\n\n    this.itemClick = (e, row) => {\n      //console.log('itemClick: ', row.name)\n      const selectedIndex = this.state.selected.indexOf(row.name); //console.log('selectedIndex: ', selectedIndex)\n\n      let newSelected = [];\n\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(this.state.selected, row.name);\n      } else if (selectedIndex >= 0) {\n        newSelected = newSelected.concat(this.state.selected.slice(0, selectedIndex), this.state.selected.slice(selectedIndex + 1));\n      }\n\n      this.setState({\n        selected: newSelected\n      }, () => {\n        console.log('this.state.selected: ', this.state.selected);\n      });\n    };\n\n    this.itemDoubleClick = (e, item) => {\n      if (item.type === 'dir') {\n        this.setState({\n          visibleWaiting: true\n        });\n        this.props.setCurrentDir(this.fsBuildParent(item.parent, item.name));\n      } else if (item.name === 'DICOMDIR') {\n        this.props.onOpenDicomdir(item);\n      } else {\n        this.props.setFsFileStore(item);\n        this.props.onOpen(item);\n      }\n    };\n\n    this.showDeleteDlg = () => {\n      this.setState({\n        visibleDeleteDlg: true\n      });\n    };\n\n    this.hideDeleteDlg = () => {\n      this.setState({\n        visibleDeleteDlg: false\n      });\n    };\n\n    this.confirmDeleteDlg = () => {\n      this.hideDeleteDlg();\n      this.deleteItem();\n    };\n\n    this.hideAlreadyExistDlg = () => {\n      this.setState({\n        visibleAlreadyExistDlg: false\n      });\n    };\n\n    this.hideSaveAs = () => {\n      this.setState({\n        visibleOSaveAsDlg: false\n      });\n    };\n\n    this.closeSaveAs = () => {\n      const filename = `${this.saveAsField.value}.zip`;\n      this.setState({\n        visibleOSaveAsDlg: false\n      }, () => {\n        let zip = new JSZip();\n        let listItems = [];\n        fs.files.where('parent').startsWithIgnoreCase(this.props.fsCurrentDir).each(e => {\n          if (this.state.selected.indexOf(e.parent) >= 0 || this.state.selected.indexOf(e.name) >= 0) listItems.push(e);\n        }).then(() => {\n          listItems.forEach(e => {\n            if (e.type !== 'dir') {\n              zip.folder(e.parent).file(e.name, e.data);\n            }\n          });\n          zip.generateAsync({\n            type: \"blob\"\n          }).then(blob => {\n            saveAs(blob, filename);\n          });\n        });\n      });\n    };\n\n    this.mouseDown = (e, item) => {\n      this.timer = setTimeout(() => {\n        this.itemDoubleClick(e, item);\n      }, 500);\n    };\n\n    this.mouseUp = e => {\n      clearTimeout(this.timer);\n    };\n\n    this.files = [];\n    this.cut = false;\n    this.itemsCount = 0;\n    this.saveAsField = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fsListDir(this.props.fsCurrentDir);\n  }\n\n  componentDidUpdate(previousProps) {\n    //console.log('componentDidUpdate: ', this.props)\n    if (this.props.fsZippedFile !== null) {\n      const zip = new JSZip();\n      zip.loadAsync(this.props.fsZippedFile).then(contents => {\n        //console.log('zip file contents: ', contents)\n        contents.forEach((relativePath, zipEntry) => {\n          //console.log('zipEntry: ', zipEntry)\n          if (zipEntry.dir) {//console.log('dir relativePath: ', relativePath)\n          } else {\n            //console.log('file relativePath: ', relativePath)\n            zip.file(relativePath).async('uint8array').then(content => {\n              this.fsAddItem(relativePath, content);\n            });\n          }\n        });\n      }).then(() => {\n        this.props.setFsZippedFile(null); //this.fsListDir(this.props.fsCurrentDir)\n      });\n    } else {\n      this.fsListDir(this.props.fsCurrentDir);\n    }\n  }\n\n  fsBuildParent(parent, name) {\n    let newParent = '';\n\n    if (parent === '') {\n      if (name !== '') newParent = name;\n    } else {\n      if (name !== '') newParent = `${parent}/${name}`;else newParent = parent;\n    }\n\n    return newParent;\n  }\n\n  fsAddItem(filename, data) {\n    //console.log('fsAddItem filename: ', filename)\n    //console.log('fsAddItem data: ', data)\n    let components = filename.split('/');\n    const name = components.pop();\n    const parent = this.fsBuildParent(this.props.fsCurrentDir, components.join('/')); //console.log(`add file, parent: ${parent}, name: ${name}`)\n\n    fs.transaction('rw', fs.files, async () => {\n      await fs.files.add({\n        parent: parent,\n        name: name,\n        type: getFileExt(name),\n        size: data.length,\n        data: data\n      });\n    }).then(() => {\n      // store subdirectory\n      while (components.length > 0) {\n        const name = components.pop();\n        const parent = this.fsBuildParent(this.props.fsCurrentDir, components.join('/')); //console.log(`put dir, parent: ${parent}, name: ${name}`)\n\n        fs.transaction('rw', fs.files, async () => {\n          await fs.files.put({\n            parent: parent,\n            name: name,\n            type: 'dir',\n            size: ''\n          });\n        }).then(() => {\n          this.fsListDir(this.props.fsCurrentDir);\n        });\n      }\n    });\n  }\n\n  fsExistDir(dir, create = true) {\n    const item = this.props.fsCurrentList.find(e => e.name === dir);\n\n    if (item !== undefined) {\n      if (create) {\n        this.fsCreateDir(this.props.fsCurrentDir, dir);\n        return true;\n      } else return false;\n    } else return false;\n  }\n\n  fsListDir(dir) {\n    //console.log('fsListDir: ', dir)\n    let listItems = [];\n    fs.transaction('r', fs.files, async () => {\n      await fs.files.where({\n        parent: dir,\n        type: 'dir'\n      }).sortBy('name').then(list => {\n        // first list all dirs\n        listItems = list;\n      }).then(() => {\n        // after list all files\n        fs.files.where({\n          parent: dir\n        }).and(item => item.type !== 'dir').sortBy('name').then(list => {\n          listItems = listItems.concat(list);\n        }).then(() => {\n          this.props.setCurrentList(listItems);\n          setTimeout(() => this.setState({\n            visibleWaiting: false\n          }), 2000);\n        });\n      });\n    });\n  }\n\n  fsCreateDir(parent, name) {\n    fs.files.add({\n      parent: parent,\n      name: name,\n      type: 'dir',\n      size: ''\n    }).then(() => {\n      this.fsListDir(this.props.fsCurrentDir);\n    });\n  }\n\n  render() {\n    const classes = this.props.classes;\n\n    const isSelected = name => this.state.selected.indexOf(name) !== -1;\n\n    const visibleTextField = this.state.visibleTextField;\n    const visibleOthers = this.state.visibleOthers;\n    const visibleDeleteDlg = this.state.visibleDeleteDlg;\n    const visibleAlreadyExistDlg = this.state.visibleAlreadyExistDlg;\n    const visibleOSaveAsDlg = this.state.visibleOSaveAsDlg;\n    const visibleOpenMultipleFilesDlg = this.state.visibleOpenMultipleFilesDlg;\n    const visibleWaiting = this.state.visibleWaiting;\n    let styleComponent = null;\n\n    if (getSettingsFsView() === 'bottom') {\n      styleComponent = {\n        marginTop: '0px',\n        height: '275px'\n      };\n    } else {\n      styleComponent = {\n        marginTop: '48px',\n        width: '350px'\n      };\n    }\n\n    let totalItemsCount = '';\n    if (this.state.selected.length > 0) totalItemsCount = `(${this.state.selected.length} / ${this.props.fsCurrentList.length} items)`;else totalItemsCount = `(${this.props.fsCurrentList.length} items)`; //console.log('this.props.fsCurrentDir: ', this.props.fsCurrentDir)\n\n    return React.createElement(\"div\", {\n      style: styleComponent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, visibleTextField ? React.createElement(Paper, {\n      component: \"form\",\n      className: classes.textPaper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, React.createElement(InputBase, {\n      autoFocus: true,\n      className: classes.textInput,\n      placeholder: this.state.textFieldLabel,\n      defaultValue: this.state.textFieldValue,\n      onChange: event => {\n        this.setState({\n          textFieldValue: event.target.value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), React.createElement(IconButton, {\n      className: classes.textButton,\n      onClick: this.confirmText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiCheck,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    })), React.createElement(IconButton, {\n      className: classes.textButton,\n      onClick: this.cancelDir,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiClose,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      variant: \"dense\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.leftButtons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, visibleWaiting ? React.createElement(CircularProgress, {\n      style: {\n        marginLeft: '10px'\n      },\n      size: 20,\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }) : React.createElement(Tooltip, {\n      title: \"Previous folder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.previousDir,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiChevronLeft,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: classes.toolbarButtons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      title: \"Select/unselect all files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.doSelectUnselect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiCheckBoxOutline,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Open selected files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.openSelectedFiles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiFolderOutline,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Create a new directory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.createDir,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiFolderPlusOutline,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Rename the last selected item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.renameItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiSquareEditOutline,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }))), React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.showOthers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiDotsHorizontal,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }))))), visibleOthers ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      variant: \"dense\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.toolbarButtons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      title: \"Move the selected items to the clipboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.cutItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiContentCut,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Copy the selected items to the clipboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.copyItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiContentCopy,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Paste clipboard contents to current location\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.pasteItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiContentPaste,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Delete the selected items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.showDeleteDlg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiDeleteOutline,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Save the opened image to sandbox file system\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.saveItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiContentSaveOutline,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Export the selected items as zipped archive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      onClick: this.exportItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiExportVariant,\n      size: '1.2rem',\n      color: this.props.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    })))))) : null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      type: \"caption text\",\n      style: {\n        fontSize: '0.75em',\n        marginLeft: '15px',\n        color: 'rgba(146, 146, 146, 1)',\n        float: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, '/' + this.props.fsCurrentDir + ' ')), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      type: \"caption text\",\n      style: {\n        fontSize: '0.75em',\n        marginRight: '5px',\n        color: 'rgba(146, 146, 146, 1)',\n        float: 'right'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }, totalItemsCount))), visibleWaiting ? React.createElement(\"div\", {\n      style: {\n        marginTop: '20px',\n        position: 'absolute'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }, React.createElement(LinearProgress, {\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    })) : null), React.createElement(\"div\", {\n      style: {\n        height: '200px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }, React.createElement(TableContainer, {\n      component: Paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, React.createElement(Table, {\n      className: classes.table,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819\n      },\n      __self: this\n    }, \"Name\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }, \"Type\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, \"Size\"))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, this.props.fsCurrentList.map(row => {\n      const isItemSelected = isSelected(row.name);\n      return React.createElement(TableRow, {\n        key: `${row.parent}/${row.name}`,\n        role: \"button\",\n        hover: true,\n        selected: isItemSelected,\n        onClick: e => {\n          this.itemClick(e, row);\n        },\n        onDoubleClick: e => {\n          this.itemDoubleClick(e, row);\n        },\n        onTouchStart: e => this.mouseDown(e, row),\n        onTouchEnd: e => this.mouseUp(e, row),\n        onMouseDown: e => this.mouseDown(e, row),\n        onMouseUp: e => this.mouseUp(e, row),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        component: \"th\",\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 840\n        },\n        __self: this\n      }, row.name), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 843\n        },\n        __self: this\n      }, row.type), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844\n        },\n        __self: this\n      }, formatBytes(row.size)));\n    }))))), React.createElement(Dialog, {\n      open: visibleDeleteDlg,\n      onClose: this.hideDeleteDlg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }, \"Are you sure to delete selected items?\"), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.hideDeleteDlg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.confirmDeleteDlg,\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862\n      },\n      __self: this\n    }, \"Ok\"))), React.createElement(Dialog, {\n      open: visibleAlreadyExistDlg,\n      onClose: this.hideAlreadyExistDlg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }, \"An item with this name already exists!\"), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.hideAlreadyExistDlg,\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 874\n      },\n      __self: this\n    }, \"Ok\"))), React.createElement(Dialog, {\n      open: visibleOSaveAsDlg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    }, \"Export archive\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }, \"Specify a file name for the archive:\"), React.createElement(TextField, {\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"id-open-url\",\n      inputRef: input => this.saveAsField = input,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => this.hideSaveAs(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: () => this.closeSaveAs(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }, \"Ok\"))), visibleOpenMultipleFilesDlg ? React.createElement(OpenMultipleFilesDlg, {\n      onClose: this.hideOpenMultipleFilesDlg,\n      files: this.files,\n      origin: 'fs',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 906\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    files: state.files,\n    localFileStore: state.localFile,\n    fsFileStore: state.fsFile,\n    activeDcm: state.activeDcm,\n    fsCurrentDir: state.fsCurrentDir,\n    fsCurrentList: state.fsCurrentList,\n    fsZippedFile: state.fsZippedFile,\n    fsRefresh: state.fsRefresh\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCurrentDir: dir => dispatch(setFsCurrentDir(dir)),\n    setCurrentList: list => dispatch(setFsCurrentList(list)),\n    setFsZippedFile: file => dispatch(setZippedFile(file)),\n    setFsFileStore: file => dispatch(fsFileStore(file))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(FsUI));","map":{"version":3,"sources":["E:/private/projects/udv/u-dicom-viewer-master-1/u-dicom-viewer-master/src/components/FsUI.js"],"names":["React","PureComponent","connect","withStyles","Button","CircularProgress","Dialog","DialogContent","DialogContentText","DialogTitle","DialogActions","Icon","IconButton","InputBase","LinearProgress","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TextField","Toolbar","Tooltip","Typography","JSZip","saveAs","fs","OpenMultipleFilesDlg","getFileExt","getFileExtReal","getFileName","formatBytes","getSettingsFsView","getFileNameCorrect","setFsCurrentDir","setFsCurrentList","setZippedFile","fsFileStore","mdiCheck","mdiChevronLeft","mdiClose","mdiContentCopy","mdiContentCut","mdiContentPaste","mdiContentSaveOutline","mdiDeleteOutline","mdiDotsHorizontal","mdiExportVariant","mdiFolderOutline","mdiFolderPlusOutline","mdiCheckBoxOutline","mdiSquareEditOutline","styles","theme","table","minWidth","toolbarButtons","marginLeft","marginRight","leftButtons","textPaper","padding","display","alignItems","width","textInput","spacing","flex","textButton","FsUI","constructor","props","state","textFieldLabel","textFieldValue","selected","selectedCopy","visibleTextField","visibleDeleteDlg","visibleOthers","visibleAlreadyExistDlg","visibleOSaveAsDlg","visibleWaiting","visibleOpenMultipleFilesDlg","doSelectUnselect","newSelected","length","setState","fsCurrentList","forEach","item","type","push","name","openSelectedFilesRetrieveItems","transaction","files","index","where","parent","fsCurrentDir","first","console","log","undefined","startsWithIgnoreCase","each","e","openSelectedFiles","then","hideOpenMultipleFilesDlg","onOpenMultipleFilesCompleted","onOpenImage","createDir","renameItem","lastSelected","previousDir","nextDir","split","slice","join","setCurrentDir","fsListDir","confirmText","check","find","oldParent","fsBuildParent","newParent","add","size","data","delete","fsCreateDir","cancelDir","saveItem","localFileStore","file","reader","FileReader","onload","event","buffer","target","result","ext","newName","counter","done","filename","checkName","readAsArrayBuffer","copyItem","newSelectedCopy","cutItem","cut","pasteItem","listItems","deleteItem","showOthers","exportItem","itemClick","row","selectedIndex","indexOf","concat","itemDoubleClick","onOpenDicomdir","setFsFileStore","onOpen","showDeleteDlg","hideDeleteDlg","confirmDeleteDlg","hideAlreadyExistDlg","hideSaveAs","closeSaveAs","saveAsField","value","zip","folder","generateAsync","blob","mouseDown","timer","setTimeout","mouseUp","clearTimeout","itemsCount","createRef","componentDidMount","componentDidUpdate","previousProps","fsZippedFile","loadAsync","contents","relativePath","zipEntry","dir","async","content","fsAddItem","setFsZippedFile","components","pop","put","fsExistDir","create","sortBy","list","and","setCurrentList","render","classes","isSelected","styleComponent","marginTop","height","totalItemsCount","color","fontSize","float","position","map","isItemSelected","input","mapStateToProps","localFile","fsFile","activeDcm","fsRefresh","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport {connect} from 'react-redux'\nimport { withStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Icon from '@mdi/react'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputBase from '@material-ui/core/InputBase'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TextField from '@material-ui/core/TextField'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Typography from '@material-ui/core/Typography'\n// import {List as ListVirtual} from 'react-virtualized'\nimport JSZip from 'jszip'\nimport { saveAs } from 'file-saver'\nimport fs from '../fs/fs'\nimport OpenMultipleFilesDlg from './OpenMultipleFilesDlg'\nimport {\n    getFileExt,\n    getFileExtReal,\n    getFileName,\n    formatBytes,\n    getSettingsFsView,\n    getFileNameCorrect,\n} from '../functions'\nimport {\n    //setFsCurrentId,\n    setFsCurrentDir,\n    setFsCurrentList,\n    setZippedFile,\n    fsFileStore,\n} from '../actions'\nimport {\n    mdiCheck,\n    mdiChevronLeft,\n    mdiClose,\n    mdiContentCopy,\n    mdiContentCut,\n    mdiContentPaste,\n    mdiContentSaveOutline,\n    mdiDeleteOutline,\n    mdiDotsHorizontal,\n    mdiExportVariant, \n    mdiFolderOutline,   \n    mdiFolderPlusOutline,\n    mdiCheckBoxOutline,\n    mdiSquareEditOutline,\n} from '@mdi/js'\n\nconst styles = theme => ({\n    table: {\n        minWidth: 250,\n    },\n    toolbarButtons: {\n        marginLeft: 'auto',\n        marginRight: -20,\n    },\n    leftButtons: {\n        marginLeft: -25,\n    },\n    textPaper: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 250,\n    },\n    textInput: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    textButton: {\n        padding: 10,\n    },\n})\n\nclass FsUI extends PureComponent {\n    constructor(props) {\n        super(props)\n        this.files = []\n        this.cut = false\n        this.itemsCount = 0\n        this.saveAsField = React.createRef()\n      }\n\n    state = {\n        textFieldLabel: '',\n        textFieldValue: '',\n        selected: [],\n        selectedCopy: [],\n        visibleTextField: false,\n        visibleDeleteDlg: false,\n        visibleOthers: false,\n        visibleAlreadyExistDlg: false,\n        visibleOSaveAsDlg: false,\n        visibleWaiting: false,\n        visibleOpenMultipleFilesDlg: false,\n    }\n\n    componentDidMount() {\n        this.fsListDir(this.props.fsCurrentDir)\n    }\n\n    componentDidUpdate(previousProps) {\n        //console.log('componentDidUpdate: ', this.props)\n        if (this.props.fsZippedFile !== null) {\n            const zip = new JSZip()\n            zip.loadAsync(this.props.fsZippedFile).then((contents) => {\n                //console.log('zip file contents: ', contents)\n                contents.forEach((relativePath, zipEntry) => {\n                    //console.log('zipEntry: ', zipEntry)\n                    if (zipEntry.dir) { \n                        //console.log('dir relativePath: ', relativePath)\n                    } else {                  \n                        //console.log('file relativePath: ', relativePath)\n                        zip.file(relativePath).async('uint8array').then((content) => {\n                            this.fsAddItem(relativePath, content)\n                        })\n                    }\n                })\n            }).then(() => {\n                this.props.setFsZippedFile(null)\n                //this.fsListDir(this.props.fsCurrentDir)\n            })\n        } else {\n            this.fsListDir(this.props.fsCurrentDir)\n        }\n    }\n\n    fsBuildParent(parent, name) {\n        let newParent = ''\n        if (parent === '') {\n            if (name !== '') \n                newParent = name\n        } else {\n            if (name !== '') \n                newParent = `${parent}/${name}` \n            else\n                newParent = parent\n        }\n        return newParent\n    }\n\n    fsAddItem(filename, data) {\n        //console.log('fsAddItem filename: ', filename)\n        //console.log('fsAddItem data: ', data)\n        let components = filename.split('/')\n        const name = components.pop()\n        const parent = this.fsBuildParent(this.props.fsCurrentDir, components.join('/'))\n        //console.log(`add file, parent: ${parent}, name: ${name}`)\n        fs.transaction('rw', fs.files, async () => {\n            await fs.files.add({\n                parent: parent,\n                name: name,\n                type: getFileExt(name),\n                size: data.length,\n                data: data\n            })             \n        }).then(() => {\n            // store subdirectory\n            while (components.length > 0) {\n                const name = components.pop()\n                const parent = this.fsBuildParent(this.props.fsCurrentDir, components.join('/'))\n                //console.log(`put dir, parent: ${parent}, name: ${name}`)\n                fs.transaction('rw', fs.files, async () => {\n                    await fs.files.put({\n                        parent: parent,\n                        name: name,\n                        type: 'dir',\n                        size: '' \n                    }) \n                }).then(() => {\n                    this.fsListDir(this.props.fsCurrentDir)\n                })\n            }            \n        })\n    }\n\n    fsExistDir(dir, create = true) {\n        const item = this.props.fsCurrentList.find(e => e.name === dir)\n        if (item !== undefined) {\n            if (create) {\n                this.fsCreateDir(this.props.fsCurrentDir, dir)\n                return true\n            } else return false\n        } else return false\n    }\n\n    fsListDir(dir) {\n        //console.log('fsListDir: ', dir)\n        let listItems = []\n        fs.transaction('r', fs.files, async ()=> {\n            await fs.files.where({parent: dir, type: 'dir'}).sortBy('name').then((list) => { // first list all dirs\n                listItems = list\n            }).then(() => { // after list all files\n                fs.files.where({parent: dir}).and(item => item.type !== 'dir').sortBy('name').then((list) => {\n                    listItems = listItems.concat(list)\n                }).then(() => {\n                    this.props.setCurrentList(listItems)\n                    setTimeout(() => this.setState({visibleWaiting: false}), 2000)\n                })\n            })\n        })\n    }\n\n    fsCreateDir(parent, name) {\n        fs.files.add({parent: parent, name: name, type: 'dir', size: ''}).then(() => { \n            this.fsListDir(this.props.fsCurrentDir)\n        })\n    }\n\n    doSelectUnselect = () => {\n        let newSelected = []\n        if (this.state.selected.length > 0) { // unselect the files\n            this.setState({selected: newSelected})            \n        } else { // select only files not dir\n            this.props.fsCurrentList.forEach((item) => {\n                if (item.type !== 'dir') {\n                    newSelected.push(item.name)\n                }\n                this.setState({selected: newSelected}, () => {\n                    //console.log('this.state.selected: ', this.state.selected)\n                })\n                \n            })\n        }\n    }\n\n    openSelectedFilesRetrieveItems = async () => {\n        await fs.transaction('r', fs.files, async () => {\n            this.state.selected.forEach( async (name, index) => {\n                await fs.files.where({parent: this.props.fsCurrentDir, name: name}).first((item) => {\n                    console.log('item: ', item)\n                    if (item !== undefined && item.type !== 'dir') {\n                        this.files.push(item)\n                    } else if (item.type === 'dir') {\n                        fs.files.where('parent').startsWithIgnoreCase(item.name).each((e) => {\n                            if (e !== undefined && e.type !== 'dir') {\n                                console.log(' e: ', e) \n                                this.files.push(e)\n                            }\n                        })\n                    }\n                })\n             })\n        })\n    }\n\n    openSelectedFiles = () => {\n        if (this.state.selected.length === 0) return\n        this.files = []\n        this.openSelectedFilesRetrieveItems().then(() => {\n            console.log('this.files: ', this.files) \n            this.setState({visibleOpenMultipleFilesDlg: true})\n            this.setState({selected: []})  \n        })\n    }\n\n    hideOpenMultipleFilesDlg = () => {\n        this.setState({ visibleOpenMultipleFilesDlg: false })\n        if (this.props.files.length > 1) {\n            this.props.onOpenMultipleFilesCompleted()\n        } else this.props.onOpenImage(0)\n    }\n\n    createDir = () => {\n        this.setState({textFieldLabel: 'new folder name', visibleTextField: !this.state.visibleTextField})\n    }\n\n    renameItem = () => {\n        this.lastSelected = this.state.selected[this.state.selected.length-1]\n        this.setState({textFieldLabel: '', textFieldValue: this.lastSelected, visibleTextField: !this.state.visibleTextField})\n    }\n\n    previousDir = () => {\n        //console.log('this.state.parentDir: ', this.state.parentDir)\n        if (this.props.fsCurrentDir === '') return\n        const nextDir = this.props.fsCurrentDir.split('/').slice(0, -1).join('/')\n        this.props.setCurrentDir(nextDir)\n        this.fsListDir(nextDir)\n    }\n\n    confirmText = (e) => {\n        if (this.state.textFieldLabel === '') { // it's a rename\n            // check if the new name already exist\n            const check = this.props.fsCurrentList.find(e => e.name === this.state.textFieldValue)\n            if (check !== undefined) {\n                this.setState({visibleAlreadyExistDlg: true})\n                return\n            }\n            const item = this.props.fsCurrentList.find(e => e.name === this.lastSelected)\n            if (item !== undefined) {\n                if (item.type === 'dir') {\n                    const oldParent = this.fsBuildParent(item.parent, item.name)\n                    const newParent = this.fsBuildParent(item.parent, this.state.textFieldValue)\n                    // rename parent for all subitems\n                    fs.transaction('rw', fs.files, async () => {\n                        await fs.files.where({parent: oldParent}).each((e) => {\n                            fs.transaction('rw', fs.files, async () => { // since is a new primary key then add it as new item \n                                await fs.files.add({\n                                parent: newParent,\n                                name: e.name,\n                                type: e.type,\n                                size: e.size,\n                                data: e.data\n                                }).then(() => { // then delete old one\n                                    fs.files.where({parent: oldParent}).delete()\n                                })\n                            })\n                        })\n                    })\n                } \n                fs.transaction('rw', fs.files, async () => { // a new primary key, add it as new item \n                    await fs.files.add({\n                      parent: item.parent,\n                      name: this.state.textFieldValue,\n                      type: item.type,\n                      size: item.size,\n                      data: item.data\n                    }).then(() => { // then delete old one\n                        fs.files.where({parent: item.parent, name: item.name}).delete()\n                    })\n                })\n                this.setState({visibleTextField: false})\n                this.fsListDir(this.props.fsCurrentDir)                \n            }\n        } else { // it's a new directory\n            this.setState({visibleTextField: false}, () => {\n                this.fsCreateDir(this.props.fsCurrentDir, this.state.textFieldValue)\n            })\n        }\n    }\n\n    cancelDir = () => {\n         this.setState({visibleTextField: false})\n    }\n\n    saveItem = () => {\n        console.log('this.props.localFileStore: ', this.props.localFileStore)\n        console.log('this.props.fsFileStore: ', this.props.fsFileStore)\n        //console.log('this.props.activeDcm: ', this.props.activeDcm)\n\n        if (this.props.localFileStore !== null) {\n            const file = this.props.localFileStore\n            if (file === null) return\n            let reader = new FileReader()\n            reader.onload = (event) => {\n                let buffer = event.target.result\n                const ext = getFileExtReal(file.name)\n                //console.log('ext: ', ext)\n                const name = getFileName(getFileNameCorrect(file.name))   \n                //console.log('name: ', name)\n                let newName = name\n                let counter = 0\n                let done = false             \n                do {\n                    let filename = ext === '' ? newName : `${newName}.${ext}`\n                    const checkName = this.props.fsCurrentList.find(e => e.name === filename)\n                    if (checkName === undefined) {\n                        fs.transaction('rw', fs.files, async () => {\n                            await fs.files.add({\n                                parent: this.props.fsCurrentDir,\n                                name: filename,\n                                type: ext === '' ? getFileExt(name) : ext,\n                                size: file.size,\n                                data: buffer\n                            })\n                        }).then(() => {\n                            this.fsListDir(this.props.fsCurrentDir)\n                        })\n                        done = true\n                    } else {\n                        newName = `${name} - Copy`\n                        if (counter > 0) newName = `${newName} (${counter})`\n                        counter++\n                    }\n                } while (!done)\n            }\n            reader.readAsArrayBuffer(file)\n        } else if (this.props.fsFileStore !== null) {\n            const file = this.props.fsFileStore\n            let buffer = file.data\n            const ext = getFileExtReal(file.name)\n            const name = getFileName(getFileNameCorrect(file.name))   \n            let newName = name\n            let counter = 0\n            let done = false             \n            do {\n                let filename = ext === '' ? newName : `${newName}.${ext}`\n                const checkName = this.props.fsCurrentList.find(e => e.name === filename)\n                if (checkName === undefined) {\n                    fs.transaction('rw', fs.files, async () => {\n                        await fs.files.add({\n                            parent: this.props.fsCurrentDir,\n                            name: filename,\n                            type: getFileExt(name),\n                            size: file.size,\n                            data: buffer\n                        })\n                    }).then(() => {\n                        this.fsListDir(this.props.fsCurrentDir)\n                    })\n                    done = true\n                } else {\n                    newName = `${name} - Copy`\n                    if (counter > 0) newName = `${newName} (${counter})`\n                    counter++\n                }\n            } while (!done)           \n        }\n    }\n\n    copyItem = () => {\n        let newSelectedCopy = []\n        this.state.selected.forEach(name => {\n            const item = this.props.fsCurrentList.find(e => e.name === name)\n            if (item !== undefined) {\n                newSelectedCopy.push({parent: item.parent, name: item.name})\n            }\n        })\n        this.setState({selectedCopy: newSelectedCopy})\n    }\n\n    cutItem = () => {\n        let newSelectedCopy = []\n        this.state.selected.forEach(name => {\n            let item = this.props.fsCurrentList.find(e => e.name === name)\n            if (item !== undefined) {\n                newSelectedCopy.push({parent: item.parent, name: item.name})\n            }\n        })\n        this.setState({selectedCopy: newSelectedCopy})\n        this.cut = true\n    }\n\n    pasteItem = () => {\n        //console.log('this.state.selectedCopy: ', this.state.selectedCopy)\n        //console.log('this.props.fsCurrentList: ', this.props.fsCurrentList)\n        this.state.selectedCopy.forEach(async (selected, index) => {\n            await fs.files.where({parent: selected.parent, name: selected.name}).first((item) => {\n                if (item !== undefined) {\n                    //console.log('item: ', item)\n                    if (item.type === 'dir') {\n                        // create a new name\n                        let counter = 0\n                        let done = false\n                        let newName = item.name\n                        do {\n                            let filename = newName\n                            const checkName = this.props.fsCurrentList.find(e => e.name === filename)\n                            if (checkName === undefined) {\n                                done = true\n                            } else {\n                                newName = `${item.name} - Copy`\n                                if (counter > 0) newName = `${newName} (${counter})`\n                                counter++\n                            }\n                        } while (!done)   \n                        //console.log('this.props.fsCurrentDir: ', this.props.fsCurrentDir)\n                        //console.log('newName: ', newName)\n                        // copy the folder\n                        fs.files.add({\n                            parent: this.props.fsCurrentDir,\n                            name: newName,\n                            type: item.type,\n                            size: item.size,\n                            data: item.data\n                        })   \n                        // copy all subdirs and files\n                        const oldParent = this.fsBuildParent(item.parent, item.name) \n                        const newParent = this.fsBuildParent(this.props.fsCurrentDir, newName) \n                        //console.log('oldParent: ', oldParent)\n                        //console.log('newParent: ', newParent)\n                        let listItems = []\n                        fs.files.where('parent').startsWithIgnoreCase(oldParent).each((e) => {\n                            listItems.push(e)\n                        }).then(() => {\n                            listItems.forEach(e => {\n                                //console.log('listItems e: ', e)\n                                //const parent = e.parent.replace(oldParent, newParent)\n                                //console.log('parent: ', parent)\n                                fs.files.add({\n                                    parent: newParent,\n                                    name: e.name,\n                                    type: e.type,\n                                    size: e.size,\n                                    data: e.data\n                                })                          \n                            })                            \n                        })\n                    } else { // it's a file\n                        const ext = getFileExtReal(item.name)\n                        const name = getFileName(item.name)    \n                        let newName = name\n                        let counter = 0\n                        let done = false             \n                        do {\n                            let filename = ext === '' ? newName : `${newName}.${ext}`\n                            const checkName = this.props.fsCurrentList.find(e => e.name === filename)\n                            if (checkName === undefined) {\n                                fs.transaction('rw', fs.files, async () => {\n                                    await fs.files.add({\n                                        parent: this.props.fsCurrentDir,\n                                        name: filename,\n                                        type: item.type,\n                                        size: item.size,\n                                        data: item.data\n                                    })\n                                })\n                                done = true\n                            } else {\n                                newName = `${name} - Copy`\n                                if (counter > 0) newName = `${newName} (${counter})`\n                                counter++\n                            }\n                        } while (!done)\n                    }\n                }\n            })\n            if (index === this.state.selectedCopy.length-1) {\n                if (this.cut) {\n                    this.state.selectedCopy.forEach((selected) => {\n                        fs.files.where({parent: selected.parent, name: selected.name}).delete()\n                    })\n                    this.setState({selectedCopy: []})\n                    this.cut = false                    \n                }\n                this.fsListDir(this.props.fsCurrentDir)\n            }\n        })\n        this.setState({selected: []})\n    }\n\n    deleteItem = () => {\n        this.state.selected.forEach(name => {\n            let item = this.props.fsCurrentList.find(e => e.name === name)\n            if (item !== undefined) {\n                if (item.type === 'dir') { // delete also all subitems\n                    fs.files.where('parent').startsWithIgnoreCase(this.fsBuildParent(item.parent, item.name)).delete()\n                }\n                fs.files.where({parent: item.parent, name: item.name}).delete().then(() => {\n                    this.fsListDir(this.props.fsCurrentDir)\n                })\n            }\n        })\n        this.setState({selected: []}) \n    }\n\n    showOthers = () => {\n        this.setState({visibleOthers: !this.state.visibleOthers})\n    }\n\n    exportItem = () => {\n        if (this.state.selected.length === 0) return\n        this.setState({visibleOSaveAsDlg: true})\n    }\n\n    itemClick = (e, row) => {\n        //console.log('itemClick: ', row.name)\n        const selectedIndex = this.state.selected.indexOf(row.name)\n        //console.log('selectedIndex: ', selectedIndex)\n        let newSelected = []\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(this.state.selected, row.name)\n        } else if (selectedIndex >= 0) {\n            newSelected = newSelected.concat(\n                this.state.selected.slice(0, selectedIndex),\n                this.state.selected.slice(selectedIndex + 1),\n            )\n        }\n        this.setState({selected: newSelected}, () => {\n            console.log('this.state.selected: ', this.state.selected)\n        })\n    }\n\n    itemDoubleClick = (e, item) => {\n        if (item.type === 'dir') {\n            this.setState({visibleWaiting: true})\n            this.props.setCurrentDir(this.fsBuildParent(item.parent, item.name))\n        } else if (item.name === 'DICOMDIR') {\n            this.props.onOpenDicomdir(item)\n        } else {\n            this.props.setFsFileStore(item)\n            this.props.onOpen(item)\n        }\n    }\n\n    showDeleteDlg = () => {\n        this.setState({ visibleDeleteDlg: true })\n      }\n    \n    hideDeleteDlg = () => {\n        this.setState({ visibleDeleteDlg: false })\n    }\n\n    confirmDeleteDlg = () => {\n        this.hideDeleteDlg()\n        this.deleteItem()\n    }\n\n    hideAlreadyExistDlg = () => {\n        this.setState({ visibleAlreadyExistDlg: false })\n    }  \n\n    hideSaveAs = () => {\n        this.setState({ visibleOSaveAsDlg: false })\n    }\n\n    closeSaveAs = () => {\n        const filename = `${this.saveAsField.value}.zip`\n        this.setState({ visibleOSaveAsDlg: false }, () => {\n            let zip = new JSZip()\n            let listItems = []\n            fs.files.where('parent').startsWithIgnoreCase(this.props.fsCurrentDir).each((e) => {\n                if (this.state.selected.indexOf(e.parent) >= 0 || this.state.selected.indexOf(e.name) >= 0)\n                    listItems.push(e)\n            }).then(() => {\n                listItems.forEach((e) => {\n                    if (e.type !== 'dir') {\n                        zip.folder(e.parent).file(e.name, e.data)\n                    }\n                })\n                zip.generateAsync({type:\"blob\"}).then(blob => {\n                    saveAs(blob, filename)\n                })\n            })\n        })\n    }    \n\n    mouseDown = (e, item) => {\n        this.timer = setTimeout(() => { \n            this.itemDoubleClick(e, item)\n        }, 500)\n    }\n\n    mouseUp = (e) => {\n        clearTimeout(this.timer)\n    }\n\n    render() {   \n        const { classes } = this.props\n        const isSelected = name => this.state.selected.indexOf(name) !== -1\n        const visibleTextField = this.state.visibleTextField\n        const visibleOthers = this.state.visibleOthers\n        const visibleDeleteDlg = this.state.visibleDeleteDlg\n        const visibleAlreadyExistDlg = this.state.visibleAlreadyExistDlg\n        const visibleOSaveAsDlg = this.state.visibleOSaveAsDlg\n        const visibleOpenMultipleFilesDlg = this.state.visibleOpenMultipleFilesDlg\n        const visibleWaiting = this.state.visibleWaiting\n\n        let styleComponent = null\n        if (getSettingsFsView() === 'bottom') {\n            styleComponent = {marginTop: '0px', height: '275px'}\n        } else {\n            styleComponent = {marginTop: '48px', width: '350px'}\n        }\n\n        let totalItemsCount = ''\n        if (this.state.selected.length > 0)\n            totalItemsCount = `(${this.state.selected.length} / ${this.props.fsCurrentList.length} items)`\n        else \n            totalItemsCount = `(${this.props.fsCurrentList.length} items)`\n\n        //console.log('this.props.fsCurrentDir: ', this.props.fsCurrentDir)\n\n        return (\n            <div style={styleComponent}>\n                { visibleTextField ? \n                    <Paper component=\"form\" className={classes.textPaper}>\n                        <InputBase\n                            autoFocus\n                            className={classes.textInput}\n                            placeholder={this.state.textFieldLabel}\n                            defaultValue={this.state.textFieldValue}\n                            onChange={(event) => {\n                                this.setState({textFieldValue: event.target.value})\n                            }}\n                        />\n                        <IconButton className={classes.textButton} onClick={this.confirmText}>\n                            <Icon path={mdiCheck} size={'1.2rem'} color={this.props.color} />\n                        </IconButton>\n                        <IconButton className={classes.textButton} onClick={this.cancelDir}>\n                            <Icon path={mdiClose} size={'1.2rem'} color={this.props.color} />\n                        </IconButton>                        \n                    </Paper>\n                  : \n                    <div>\n\n                        <div>\n                            <Toolbar variant=\"dense\">\n                                <div className={classes.leftButtons}>\n                                { visibleWaiting ?\n                                    <CircularProgress style={{marginLeft: '10px'}} size={20} color=\"secondary\" />\n                                  : \n                                    <Tooltip title=\"Previous folder\">\n                                        <IconButton color=\"inherit\" onClick={this.previousDir} >\n                                            <Icon path={mdiChevronLeft} size={'1.2rem'} color={this.props.color} />\n                                        </IconButton>       \n                                    </Tooltip>                                     \n                                }\n                    \n                                </div>\n                                <div className={classes.toolbarButtons}>\n                                    <Tooltip title=\"Select/unselect all files\">\n                                        <IconButton color=\"inherit\" onClick={this.doSelectUnselect}>\n                                            <Icon path={mdiCheckBoxOutline} size={'1.2rem'} color={this.props.color} />\n                                        </IconButton>\n                                    </Tooltip>    \n                                    <Tooltip title=\"Open selected files\">\n                                        <IconButton color=\"inherit\" onClick={this.openSelectedFiles}>\n                                            <Icon path={mdiFolderOutline} size={'1.2rem'} color={this.props.color} />\n                                        </IconButton>\n                                    </Tooltip>                            \n                                    <Tooltip title=\"Create a new directory\">\n                                        <IconButton color=\"inherit\" onClick={this.createDir}>\n                                            <Icon path={mdiFolderPlusOutline} size={'1.2rem'} color={this.props.color} />\n                                        </IconButton>\n                                    </Tooltip>\n                                    <Tooltip title=\"Rename the last selected item\">\n                                        <IconButton color=\"inherit\" onClick={this.renameItem}>\n                                            <Icon path={mdiSquareEditOutline} size={'1.2rem'} color={this.props.color} />\n                                        </IconButton> \n                                    </Tooltip>\n\n                                    <IconButton color=\"inherit\" onClick={this.showOthers}>\n                                        <Icon path={mdiDotsHorizontal} size={'1.2rem'} color={this.props.color} />\n                                    </IconButton>                           \n                                </div>            \n                            </Toolbar>\n                        </div> \n\n                        { visibleOthers ?\n                            <div>\n                                <Toolbar variant=\"dense\">\n                                    <div className={classes.toolbarButtons}>\n                                        <Tooltip title=\"Move the selected items to the clipboard\">                          \n                                            <IconButton color=\"inherit\" onClick={this.cutItem}>\n                                                <Icon path={mdiContentCut} size={'1.2rem'} color={this.props.color} />\n                                            </IconButton> \n                                        </Tooltip>  \n                                        <Tooltip title=\"Copy the selected items to the clipboard\">\n                                            <IconButton color=\"inherit\" onClick={this.copyItem}>\n                                                <Icon path={mdiContentCopy} size={'1.2rem'} color={this.props.color} />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title=\"Paste clipboard contents to current location\">                             \n                                            <IconButton color=\"inherit\" onClick={this.pasteItem}>\n                                                <Icon path={mdiContentPaste} size={'1.2rem'} color={this.props.color} />\n                                            </IconButton>   \n                                        </Tooltip>  \n                                        <Tooltip title=\"Delete the selected items\">    \n                                            <IconButton color=\"inherit\" onClick={this.showDeleteDlg}>\n                                                <Icon path={mdiDeleteOutline} size={'1.2rem'} color={this.props.color} />\n                                            </IconButton>  \n                                        </Tooltip>                                    \n                                        <Tooltip title=\"Save the opened image to sandbox file system\"> \n                                            <IconButton color=\"inherit\" onClick={this.saveItem}>\n                                                <Icon path={mdiContentSaveOutline} size={'1.2rem'} color={this.props.color} />\n                                            </IconButton>      \n                                        </Tooltip>\n                                        <Tooltip title=\"Export the selected items as zipped archive\">\n                                            <IconButton color=\"inherit\" onClick={this.exportItem}>\n                                                <Icon path={mdiExportVariant} size={'1.2rem'} color={this.props.color} />\n                                            </IconButton>   \n                                        </Tooltip>     \n                                        {/*<IconButton color=\"inherit\" onClick={this.downloadItem}>\n                                            <Icon path={mdiDownload} size={'1.2rem'} color={this.props.color} />\n                                        </IconButton>*/}                                     \n                                    </div>            \n                                </Toolbar>\n                            </div>\n                        : null\n                        }\n\n                        <div>\n                            <div>\n                                <Typography \n                                    type=\"caption text\" \n                                    style={{fontSize: '0.75em', marginLeft: '15px', color: 'rgba(146, 146, 146, 1)', float: 'left'}}>\n                                        {'/'+this.props.fsCurrentDir+' '}\n                                </Typography>\n                            </div>\n                            <div>\n                                <Typography \n                                    type=\"caption text\" \n                                    style={{fontSize: '0.75em', marginRight: '5px', color: 'rgba(146, 146, 146, 1)', float: 'right'}}>\n                                        { totalItemsCount }\n                                </Typography>\n                            </div>\n                        </div>    \n\n                        { visibleWaiting ?\n                            <div style={{marginTop: '20px', position: 'absolute'}}>\n                                <LinearProgress color=\"secondary\" />\n                            </div>\n                          : null  \n                        }\n    \n                    </div>\n                    \n                }\n                <div style={{height: '200px'}}>\n                    <TableContainer component={Paper}>\n                        <Table className={classes.table} size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell align=\"left\">Type</TableCell>\n                                    <TableCell align=\"left\">Size</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                            {this.props.fsCurrentList.map((row) => {\n                                const isItemSelected = isSelected(row.name)\n                                return (\n                                    <TableRow \n                                        key={`${row.parent}/${row.name}`} \n                                        role='button' \n                                        hover\n                                        selected={isItemSelected}\n                                        onClick={(e) => {this.itemClick(e, row)}}\n                                        onDoubleClick={(e) => {this.itemDoubleClick(e, row)}}\n                                        onTouchStart={(e) => this.mouseDown(e, row)} \n                                        onTouchEnd={(e) => this.mouseUp(e, row)}\n                                        onMouseDown={(e) => this.mouseDown(e, row)} \n                                        onMouseUp={(e) => this.mouseUp(e, row)}\n                                    >\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {row.name}\n                                        </TableCell>\n                                        <TableCell align=\"left\">{row.type}</TableCell>\n                                        <TableCell align=\"left\">{formatBytes(row.size)}</TableCell>\n                                    </TableRow>\n                                )\n                            })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </div>   \n\n                <Dialog\n                    open={visibleDeleteDlg}\n                    onClose={this.hideDeleteDlg}\n                >\n                    <DialogTitle>{\"Are you sure to delete selected items?\"}</DialogTitle>\n                    <DialogActions>\n                        <Button onClick={this.hideDeleteDlg}>\n                            Cancel\n                        </Button>\n                        <Button onClick={this.confirmDeleteDlg} autoFocus>\n                            Ok\n                        </Button>\n                    </DialogActions>\n                </Dialog>    \n\n                <Dialog\n                    open={visibleAlreadyExistDlg}\n                    onClose={this.hideAlreadyExistDlg}\n                >\n                    <DialogTitle>{\"An item with this name already exists!\"}</DialogTitle>\n                    <DialogActions>\n                        <Button onClick={this.hideAlreadyExistDlg} autoFocus>\n                            Ok\n                        </Button>\n                    </DialogActions>\n                </Dialog>    \n\n                <Dialog\n                    open={visibleOSaveAsDlg}\n                >\n                    <DialogTitle>Export archive</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Specify a file name for the archive:\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"id-open-url\"\n                            inputRef={input => (this.saveAsField = input)}\n                            fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => this.hideSaveAs()} >\n                            Cancel\n                        </Button>\n                        <Button onClick={() => this.closeSaveAs()}>\n                            Ok\n                        </Button>\n                    </DialogActions>\n                </Dialog>          \n\n                {visibleOpenMultipleFilesDlg ? <OpenMultipleFilesDlg onClose={this.hideOpenMultipleFilesDlg} files={this.files} origin={'fs'} /> : null}                    \n            </div>\n        )\n    }              \n}\n\nconst mapStateToProps = (state) => {\n    return {\n      files: state.files,\n      localFileStore: state.localFile,\n      fsFileStore: state.fsFile,  \n      activeDcm: state.activeDcm,\n      fsCurrentDir: state.fsCurrentDir,\n      fsCurrentList: state.fsCurrentList,\n      fsZippedFile: state.fsZippedFile,\n      fsRefresh: state.fsRefresh,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setCurrentDir: (dir) => dispatch(setFsCurrentDir(dir)),\n        setCurrentList: (list) => dispatch(setFsCurrentList(list)),\n        setFsZippedFile: (file) => dispatch(setZippedFile(file)),\n        setFsFileStore: (file) => dispatch(fsFileStore(file)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(FsUI))\n"]},"metadata":{},"sourceType":"module"}