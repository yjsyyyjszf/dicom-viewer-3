{"ast":null,"code":"import _objectSpread from \"/media/mohammad/work/websites/cornerstone/dicom-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { CLEAR_STORE, LOCALFILE_STORE, FSFILE_STORE, FILES_STORE, DCM_IS_OPEN, DCM_TOOL, ACTIVE_DCM_INDEX, ACTIVE_DCM //DCM_IMAGE,\n, ACTIVE_MEASUREMENTS, LAYOUT, DICOMDIR, FSCURRENTDIR, FSCURRENTLIST, FSZIPPEDFILE, FSREFRESH, VOLUME_STORE //LUT_STORE,\n//SANDBOXEDFILE_STORE,\n} from '../actions';\nexport default function storeReducer(state = {}, action) {\n  //console.log('storeReducer: ', action)\n  switch (action.type) {\n    case CLEAR_STORE:\n      return {\n        localFile: state.localFile,\n        fsFile: state.fsFile,\n        files: null,\n        isOpen: state.isOpen.map((el, i) => i === state.activeDcmIndex ? false : el),\n        tool: null,\n        activeDcmIndex: state.activeDcmIndex,\n        activeDcm: state.activeDcm,\n        //images: [],\n        measurements: null,\n        layout: state.layout,\n        dicomdir: state.dicomdir,\n        fsCurrentDir: state.fsCurrentDir,\n        fsCurrentList: state.fsCurrentList,\n        fsZippedFile: null,\n        fsRefresh: state.fsRefresh,\n        //sandboxedFile: state.sandboxedFile,\n        volume: null,\n        lut: null\n      };\n\n    case LOCALFILE_STORE:\n      return _objectSpread({}, state, {\n        localFile: action.localFile,\n        fsFile: null\n      });\n\n    case FSFILE_STORE:\n      return _objectSpread({}, state, {\n        localFile: null,\n        fsFile: action.fsFile\n      });\n\n    case FILES_STORE:\n      return _objectSpread({}, state, {\n        files: action.files\n      });\n\n    case DCM_IS_OPEN:\n      return _objectSpread({}, state, {\n        isOpen: state.isOpen.map((el, i) => i === action.value.index ? action.value.value : el),\n\n        /*images: [\n          ...state.images\n        ],*/\n        measurements: state.measurements,\n        layout: state.layout,\n        dicomdir: state.dicomdir,\n        fsCurrentDir: state.fsCurrentDir,\n        fsCurrentList: state.fsCurrentList\n      });\n\n    case DCM_TOOL:\n      return _objectSpread({}, state, {\n        tool: action.tool,\n\n        /*images: [\n          ...state.images\n        ],*/\n        measurements: state.measurements,\n        layout: state.layout,\n        dicomdir: state.dicomdir,\n        fsCurrentDir: state.fsCurrentDir,\n        fsCurrentList: state.fsCurrentList\n      });\n\n    case ACTIVE_DCM_INDEX:\n      return _objectSpread({}, state, {\n        activeDcmIndex: action.activeDcmIndex,\n\n        /*images: [\n          ...state.images\n        ],*/\n        measurements: state.measurements,\n        layout: state.layout,\n        dicomdir: state.dicomdir,\n        fsCurrentDir: state.fsCurrentDir,\n        fsCurrentList: state.fsCurrentList\n      });\n\n    case ACTIVE_DCM:\n      return _objectSpread({}, state, {\n        activeDcm: action.activeDcm,\n\n        /*images: [\n          ...state.images\n        ],*/\n        measurements: state.measurements,\n        layout: state.layout,\n        dicomdir: state.dicomdir,\n        fsCurrentDir: state.fsCurrentDir,\n        fsCurrentList: state.fsCurrentList\n      });\n\n    /*\n          case DCM_IMAGE:\n              return {\n                ...state,\n                images: [\n                  ...state.images,\n                  action.images,\n                ],  \n                measurements: state.measurements,\n                layout: state.layout,\n                dicomdir: state.dicomdir,\n                fsCurrentDir: state.fsCurrentDir,\n                fsCurrentList: state.fsCurrentList,  \n              } \n    */\n\n    case ACTIVE_MEASUREMENTS:\n      return _objectSpread({}, state, {\n        measurements: [...action.measurements]\n      });\n\n    case LAYOUT:\n      return _objectSpread({}, state, {\n        //images: [...state.images],\n        measurements: state.measurements,\n        layout: action.layout,\n        dicomdir: state.dicomdir,\n        fsCurrentDir: state.fsCurrentDir,\n        fsCurrentList: state.fsCurrentList\n      });\n\n    case DICOMDIR:\n      return _objectSpread({}, state, {\n        dicomdir: action.dicomdir\n      });\n\n    case FSCURRENTDIR:\n      return _objectSpread({}, state, {\n        fsCurrentDir: action.fsCurrentDir\n      });\n\n    case FSCURRENTLIST:\n      return _objectSpread({}, state, {\n        fsCurrentList: [...action.fsCurrentList]\n      });\n\n    case FSZIPPEDFILE:\n      return _objectSpread({}, state, {\n        fsZippedFile: action.fsZippedFile\n      });\n\n    case FSREFRESH:\n      return _objectSpread({}, state, {\n        fsRefresh: !state.fsRefresh\n      });\n\n    case VOLUME_STORE:\n      return _objectSpread({}, state, {\n        volume: action.volume\n      });\n\n    /*\n          case LUT_STORE:\n            return {\n              ...state,\n              lut: action.lut,        \n            }                  \n    \n          case SANDBOXEDFILE_STORE:\n            return {\n              ...state,\n              //localfile: null,\n              sandboxedFile: action.sandboxedFile,        \n            } \n    */\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/media/mohammad/work/websites/cornerstone/dicom-viewer/src/reducers/index.js"],"names":["CLEAR_STORE","LOCALFILE_STORE","FSFILE_STORE","FILES_STORE","DCM_IS_OPEN","DCM_TOOL","ACTIVE_DCM_INDEX","ACTIVE_DCM","ACTIVE_MEASUREMENTS","LAYOUT","DICOMDIR","FSCURRENTDIR","FSCURRENTLIST","FSZIPPEDFILE","FSREFRESH","VOLUME_STORE","storeReducer","state","action","type","localFile","fsFile","files","isOpen","map","el","i","activeDcmIndex","tool","activeDcm","measurements","layout","dicomdir","fsCurrentDir","fsCurrentList","fsZippedFile","fsRefresh","volume","lut","value","index"],"mappings":"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","sourcesContent":["import {\n  CLEAR_STORE, \n  LOCALFILE_STORE,\n  FSFILE_STORE,\n  FILES_STORE,\n  DCM_IS_OPEN, \n  DCM_TOOL, \n  ACTIVE_DCM_INDEX, \n  ACTIVE_DCM, \n  //DCM_IMAGE,\n  ACTIVE_MEASUREMENTS,\n  LAYOUT,\n  DICOMDIR,\n  FSCURRENTDIR,\n  FSCURRENTLIST,\n  FSZIPPEDFILE,\n  FSREFRESH,\n  VOLUME_STORE,\n  //LUT_STORE,\n  //SANDBOXEDFILE_STORE,\n} from '../actions'\n\nexport default function storeReducer(state={}, action) {\n    //console.log('storeReducer: ', action)\n    switch(action.type) {\n      \n      case CLEAR_STORE:\n        return {\n          localFile: state.localFile,\n          fsFile: state.fsFile,\n          files: null, \n          isOpen: state.isOpen.map((el, i) => i === state.activeDcmIndex ? false : el),\n          tool: null,\n          activeDcmIndex: state.activeDcmIndex,\n          activeDcm: state.activeDcm,\n          //images: [],\n          measurements: null,\n          layout: state.layout,\n          dicomdir: state.dicomdir, \n          fsCurrentDir: state.fsCurrentDir,\n          fsCurrentList: state.fsCurrentList,\n          fsZippedFile: null,\n          fsRefresh: state.fsRefresh,\n          //sandboxedFile: state.sandboxedFile,\n          volume: null,\n          lut: null,\n        };\n\n      case LOCALFILE_STORE:\n          return {\n            ...state,\n            localFile: action.localFile,     \n            fsFile: null,   \n          };\n\n      case FSFILE_STORE:\n          return {\n            ...state,\n            localFile: null,     \n            fsFile: action.fsFile,   \n          };\n\n      case FILES_STORE:\n          return {\n            ...state,\n            files: action.files,  \n          };\n\n      case DCM_IS_OPEN:\n          return {\n            ...state,\n            isOpen: state.isOpen.map((el, i) => i === action.value.index ? action.value.value : el),\n            /*images: [\n              ...state.images\n            ],*/            \n            measurements: state.measurements,\n            layout: state.layout,    \n            dicomdir: state.dicomdir,    \n            fsCurrentDir: state.fsCurrentDir,\n            fsCurrentList: state.fsCurrentList,            \n          };\n\n      case DCM_TOOL:\n          return {\n            ...state,\n            tool: action.tool,\n            /*images: [\n              ...state.images\n            ],*/  \n            measurements: state.measurements,\n            layout: state.layout,\n            dicomdir: state.dicomdir,\n            fsCurrentDir: state.fsCurrentDir,\n            fsCurrentList: state.fsCurrentList,  \n          };\n\n      case ACTIVE_DCM_INDEX:\n          return {\n            ...state,\n            activeDcmIndex: action.activeDcmIndex,\n            /*images: [\n              ...state.images\n            ],*/  \n            measurements: state.measurements,\n            layout: state.layout,\n            dicomdir: state.dicomdir,\n            fsCurrentDir: state.fsCurrentDir,\n            fsCurrentList: state.fsCurrentList,  \n          };\n\n      case ACTIVE_DCM:\n          return {\n            ...state,\n            activeDcm: action.activeDcm,\n            /*images: [\n              ...state.images\n            ],*/  \n            measurements: state.measurements,\n            layout: state.layout,\n            dicomdir: state.dicomdir,\n            fsCurrentDir: state.fsCurrentDir,\n            fsCurrentList: state.fsCurrentList,  \n          };\n/*\n      case DCM_IMAGE:\n          return {\n            ...state,\n            images: [\n              ...state.images,\n              action.images,\n            ],  \n            measurements: state.measurements,\n            layout: state.layout,\n            dicomdir: state.dicomdir,\n            fsCurrentDir: state.fsCurrentDir,\n            fsCurrentList: state.fsCurrentList,  \n          } \n*/\n      case ACTIVE_MEASUREMENTS:\n        return {\n          ...state,\n          measurements: [...action.measurements],\n        };\n\n      case LAYOUT:\n            return {\n              ...state,\n              //images: [...state.images],\n              measurements: state.measurements,\n              layout: action.layout,\n              dicomdir: state.dicomdir,\n              fsCurrentDir: state.fsCurrentDir,\n              fsCurrentList: state.fsCurrentList,  \n            };\n\n      case DICOMDIR:\n            return {\n              ...state,\n              dicomdir: action.dicomdir\n            };\n\n      case FSCURRENTDIR:\n            return {\n              ...state,\n              fsCurrentDir: action.fsCurrentDir\n            };\n\n      case FSCURRENTLIST:\n            return {\n              ...state,\n              fsCurrentList: [...action.fsCurrentList]\n            };\n\n      case FSZIPPEDFILE:\n            return {\n              ...state,\n              fsZippedFile: action.fsZippedFile\n            };\n\n      case FSREFRESH:\n            return {\n              ...state,\n              fsRefresh: !state.fsRefresh\n            };\n\n      case VOLUME_STORE:\n        return {\n          ...state,\n          volume: action.volume,        \n        };\n/*\n      case LUT_STORE:\n        return {\n          ...state,\n          lut: action.lut,        \n        }                  \n\n      case SANDBOXEDFILE_STORE:\n        return {\n          ...state,\n          //localfile: null,\n          sandboxedFile: action.sandboxedFile,        \n        } \n*/\n      default:\n          return state\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}