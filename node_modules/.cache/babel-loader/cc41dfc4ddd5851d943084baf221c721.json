{"ast":null,"code":"var _jsxFileName = \"E:\\\\private\\\\projects\\\\udv\\\\u-dicom-viewer-master-1\\\\u-dicom-viewer-master\\\\src\\\\components\\\\DownloadZipDlg.js\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { setZippedFile } from '../actions/index';\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\nclass DownloadZipDlg extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: 0\n    };\n\n    this.hide = () => {\n      this.props.onClose();\n    };\n\n    this.cancel = () => {\n      source.cancel('Operation canceled by the user.');\n      this.hide();\n    };\n\n    this.requestDownloadZip = () => {\n      console.log('this.props.url', this.props.url);\n      this.setState({\n        loading: 0\n      });\n      axios({\n        method: 'get',\n        url: this.props.url,\n        responseType: 'arraybuffer',\n        cancelToken: source.token,\n        onDownloadProgress: progressEvent => {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          this.setState({\n            loading: percentCompleted\n          });\n          console.log('loading: ', percentCompleted);\n        }\n      }).then(response => {\n        console.log('response: ', response);\n        this.props.setFsZippedFile(response.data);\n        this.hide();\n      }).catch(error => {\n        console.log('error: ', error);\n      });\n    };\n  }\n\n  componentDidMount(previousProps) {\n    this.requestDownloadZip();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      open: true,\n      onClose: this.hide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Downloading zip archive...\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(LinearProgress, {\n      variant: \"determinate\",\n      value: this.state.loading,\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.cancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Cancel\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setFsZippedFile: file => dispatch(setZippedFile(file))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(DownloadZipDlg);","map":{"version":3,"sources":["E:/private/projects/udv/u-dicom-viewer-master-1/u-dicom-viewer-master/src/components/DownloadZipDlg.js"],"names":["React","PureComponent","connect","axios","Button","Dialog","DialogActions","DialogContent","DialogTitle","LinearProgress","setZippedFile","CancelToken","source","DownloadZipDlg","state","loading","hide","props","onClose","cancel","requestDownloadZip","console","log","url","setState","method","responseType","cancelToken","token","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","then","response","setFsZippedFile","data","catch","error","componentDidMount","previousProps","render","mapDispatchToProps","dispatch","file"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport {connect} from 'react-redux'\nimport axios from 'axios'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {\n  setZippedFile,\n} from '../actions/index'\n\nconst CancelToken = axios.CancelToken\nconst source = CancelToken.source()\n\nclass DownloadZipDlg extends PureComponent {\n\n  state = {\n    loading: 0\n  }\n\n  componentDidMount(previousProps) {\n    this.requestDownloadZip()\n  }\n\n  hide = () => {\n    this.props.onClose()\n  }\n\n  cancel = () => {\n    source.cancel('Operation canceled by the user.')\n    this.hide()\n  }\n\n  requestDownloadZip = () => {\n    console.log('this.props.url', this.props.url)\n    this.setState({loading: 0})\n    axios({\n      method: 'get',\n      url: this.props.url,\n      responseType: 'arraybuffer',\n      cancelToken: source.token,\n      onDownloadProgress: (progressEvent) => {\n        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n        this.setState({ loading: percentCompleted })\n        console.log('loading: ', percentCompleted)\n      },\n    }).then((response) => {\n        console.log('response: ', response)\n        this.props.setFsZippedFile(response.data)\n        this.hide()\n    }).catch((error) => {\n      console.log('error: ', error)\n    })\n  }\n  \n\n  render() {\n    return (\n      <div>\n        <Dialog\n            open={true}\n            onClose={this.hide}\n        >\n            <DialogTitle>{\"Downloading zip archive...\"}</DialogTitle>\n            <DialogContent>\n              <LinearProgress variant=\"determinate\" value={this.state.loading} color='secondary' />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={this.cancel}>\n                    Cancel\n                </Button>\n            </DialogActions>\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setFsZippedFile: (file) => dispatch(setZippedFile(file))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(DownloadZipDlg)\n"]},"metadata":{},"sourceType":"module"}