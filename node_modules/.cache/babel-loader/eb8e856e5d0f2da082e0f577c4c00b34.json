{"ast":null,"code":"var _jsxFileName = \"/media/mohammad/work/websites/cornerstone/dicom-viewer/src/components/Histogram.js\";\nimport React, { PureComponent } from 'react'; //import Draggable from 'react-draggable'\n//import IconButton from '@material-ui/core/IconButton'\n\nimport Slider from '@material-ui/core/Slider'; //import HighlightOffIcon from '@material-ui/icons/HighlightOff'\n\nimport { connect } from 'react-redux'; //import * as cornerstone from 'cornerstone-core'\n// import { import as csTools } from 'cornerstone-tools'\n// const getRGBPixels = csTools('util/getRGBPixels')\n\nconst HIST_WIDTH = 256;\nconst HIST_HEIGHT = 128;\nconst N_BINS = 256;\nconst style = {\n  width: '273px',\n  padding: '8px 8px 8px 8px',\n  backgroundColor: '#444444'\n};\nconst styleSlider = {\n  width: '255px',\n  marginTop: '-9px'\n};\nconst styleCanvasGradient = {\n  marginTop: '-9px'\n};\nconst styleTable = {\n  borderCollapse: 'collapse',\n  fontFamily: 'Courier, monospace',\n  fontSize: '67%',\n  width: '100%'\n};\nconst styleTableTd = {\n  tableLayout: 'fixed',\n  width: '25%'\n};\n\nclass Histogram extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeDrags: 0,\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      controlledPosition: {\n        x: -400,\n        y: 200\n      },\n      value: 128,\n      histCount: 0,\n      valueScale: 0,\n      minHist: 0,\n      maxHist: 0,\n      mean: 0,\n      stdDev: 0\n    };\n\n    this.handleChangeValue = (event, newValue) => {\n      //console.log('newValue: ', newValue)\n      //console.log('(newValue*this.binSize)+this.state.minHist: ', (newValue*this.binSize)+this.state.minHist)\n      //console.log('this.hist256[newValue]: ', this.hist256[newValue])\n      this.setState({\n        value: newValue\n      });\n      this.setState({\n        valueScale: newValue * this.binSize + this.state.minHist\n      });\n      this.setState({\n        histCount: this.hist256[newValue]\n      });\n    };\n\n    this.hide = () => {\n      this.props.onClose();\n    };\n\n    this.onDrag = (e, ui) => {\n      const _this$state$deltaPosi = this.state.deltaPosition,\n            x = _this$state$deltaPosi.x,\n            y = _this$state$deltaPosi.y;\n      this.setState({\n        deltaPosition: {\n          x: x + ui.deltaX,\n          y: y + ui.deltaY\n        }\n      });\n    };\n\n    this.onStart = () => {\n      this.setState({\n        activeDrags: this.state.activeDrags + 1\n      });\n    };\n\n    this.onStop = () => {\n      this.setState({\n        activeDrags: this.state.activeDrags - 1\n      });\n    };\n\n    this.canvasHistogram = React.createRef();\n    this.canvasGradient = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log('Histogram - componentDidMount: ')\n    //this.image = this.props.activeDcm.image\n    //this.element = this.props.activeDcm.element\n    //this.isDicom = this.props.activeDcm.isDicom\n    //this.pixelData = this.props.activeDcm.image.getPixelData()\n    const canvasH = this.canvasHistogram.current;\n    const ctxH = this.canvasHistogram.current.getContext(\"2d\");\n    ctxH.translate(0, canvasH.height);\n    ctxH.scale(1, -1);\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    //console.log('Histogram - componentDidUpdate: ')\n    if (this.props.activeDcm === null) {\n      const ctxH = this.canvasHistogram.current.getContext(\"2d\");\n      ctxH.clearRect(0, 0, ctxH.canvas.width, ctxH.canvas.height);\n      return;\n    }\n\n    this.updateCanvas();\n  }\n\n  getMousePos(canvas, evt) {\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: evt.clientX - rect.left,\n      y: evt.clientY - rect.top\n    };\n  }\n\n  getRGBPixelsImage(x, y, width, height) {\n    const pixelData = this.props.activeDcm.image.getPixelData();\n    const storedPixelData = [];\n    x = Math.round(x);\n    y = Math.round(y);\n    let index = 0;\n    let spIndex, row, column;\n\n    for (row = 0; row < height; row++) {\n      for (column = 0; column < width; column++) {\n        spIndex = ((row + y) * this.props.activeDcm.image.rows + (column + x)) * 4;\n        const red = pixelData[spIndex];\n        const green = pixelData[spIndex + 1];\n        const blue = pixelData[spIndex + 2];\n        const alpha = pixelData[spIndex + 3];\n        storedPixelData[index++] = red;\n        storedPixelData[index++] = green;\n        storedPixelData[index++] = blue;\n        storedPixelData[index++] = alpha;\n      }\n    }\n\n    return storedPixelData;\n  }\n\n  getPixelsImage(x, y, width, height) {\n    const pixelData = this.props.activeDcm.image.getPixelData();\n    const storedPixelData = [];\n    x = Math.round(x);\n    y = Math.round(y);\n    let index = 0;\n    let spIndex, row, column;\n\n    for (row = 0; row < height; row++) {\n      for (column = 0; column < width; column++) {\n        spIndex = (row + y) * this.props.activeDcm.image.rows + (column + x);\n        storedPixelData[index++] = pixelData[spIndex];\n      }\n    }\n\n    return storedPixelData;\n  }\n\n  getPixel(x, y) {\n    let sp = [];\n\n    if (this.props.activeDcm.isDicom) {\n      if (this.props.activeDcm.image.color) {\n        //sp = getRGBPixels(this.element, x, y, 1, 1)\n        //sp = cornerstone.getStoredPixels(this.element, x, y, 1, 1)\n        sp = this.getRGBPixelsImage(x, y, 1, 1);\n      } else {\n        // sp = cornerstone.getStoredPixels(this.props.activeDcm.element, x, y, 1, 1)\n        sp = this.getPixelsImage(x, y, 1, 1);\n      }\n    } else {\n      sp = this.getRGBPixelsImage(x, y, 1, 1);\n    }\n\n    return sp[0];\n  }\n\n  updateCanvas() {\n    const image = this.props.activeDcm.image; //const element = this.props.element\n\n    const maxPixelValue = image.maxPixelValue;\n    const minPixelValue = image.minPixelValue; //const k = Math.pow(2, this.props.bitsStored)\n\n    const minHist = minPixelValue + image.intercept;\n    const maxHist = maxPixelValue + image.intercept;\n    const lenHist = maxHist - minHist + 1;\n    const binSize = lenHist / N_BINS;\n    let zero256 = Math.floor(Math.abs(minHist) / binSize);\n    let stepWW = Math.round(image.windowWidth / binSize / 2);\n    let stepWC = Math.round(image.windowCenter / binSize);\n    this.setState({\n      minHist: minHist\n    });\n    this.setState({\n      maxHist: maxHist\n    });\n    this.binSize = binSize; //console.log('activeDcm: ', this.props.activeDcm)\n    //console.log('image: ', )\n    //console.log('getPixelData: ', image.getPixelData())\n    //console.log('columns: ', image.columns)\n    //console.log('rows: ', image.rows)\n    //console.log('isDicom: ', this.props.activeDcm.isDicom)\n    //console.log('bitsStored: ', k)\n    //console.log('minHist: ', minHist)\n    //console.log('maxHist: ', maxHist)\n    //console.log('lenHist: ', lenHist)\n    //console.log('binSize: ', binSize)\n    //console.log('zeroHist: ', zero256)\n    //console.log('stepWW: ', stepWW)\n    //console.log('stepWC: ', stepWC)\n    //console.log('zero256-stepWW: ', zero256-stepWW)\n    //console.log('zero256+stepWW: ', zero256+stepWW)   \n    //console.log('image.color: ', image.color)\n    //console.log('image.slope: ', image.slope)\n    //console.log('image.intercept: ', image.intercept)\n\n    let m = 0; // the mean\n    // build histogram\n\n    let hist = Array(lenHist).fill(0);\n\n    for (let y = 0; y < image.columns; y++) {\n      for (let x = 0; x < image.rows; x++) {\n        let sp = this.getPixel(x, y);\n        let mo = sp * image.slope + image.intercept;\n        hist[mo - minHist] += 1;\n        m += mo;\n      }\n    }\n\n    m = m / (image.columns * image.rows);\n    this.setState({\n      mean: m\n    }); //console.log('hist: ', hist)\n    //console.log('mean: ', m)\n    // calculate standard deviation\n\n    let s = 0;\n\n    for (let y = 0; y < image.columns; y++) for (let x = 0; x < image.rows; x++) {\n      let sp = this.getPixel(x, y);\n      let mo = sp * image.slope + image.intercept;\n      s += Math.pow(mo - m, 2);\n    }\n\n    s = Math.sqrt(s / (image.columns * image.rows));\n    this.setState({\n      stdDev: s\n    }); // binning the histogram \n\n    let hist256 = Array(N_BINS).fill(0);\n    let max = 0;\n\n    if (binSize < 1) {\n      let binStep = Math.round(N_BINS / lenHist);\n      let iHist = 0;\n      let i = 0;\n\n      while (i < N_BINS) {\n        for (let j = 0; j < binStep; j++) {\n          hist256[i] = iHist < lenHist ? hist[iHist] : 0;\n          if (max < hist256[i]) max = hist256[i];\n          i++;\n        }\n\n        iHist++;\n      }\n      /*for (let i=0; i < N_BINS; i+=binStep) {\n        const k = Math.floor(i)\n        //console.log(`i: ${k} `)\n        for (let j=0; j < Math.round(binStep); j++) { \n          console.log(`i: ${k} - j: ${j} - iHist: ${iHist} - hist[iHist]: ${hist[iHist]}`)\n          hist256[k+j] = hist[iHist]\n        }\n        iHist++\n        if (max < hist256[k]) max = hist256[k] \n      }*/\n\n    } else {\n      let step = 0;\n\n      for (let i = 0; i < N_BINS; i++) {\n        for (let j = step; j < Math.round(step + binSize); j++) {\n          if (j >= lenHist) break;\n          hist256[i] += hist[j];\n        }\n\n        if (max < hist256[i]) {\n          max = hist256[i];\n        }\n\n        step = Math.round(step + binSize);\n      }\n    }\n\n    this.hist256 = hist256; //console.log('hist256: ', hist256)\n    //console.log('max: ', max)\n\n    if (max / HIST_HEIGHT > 100) max = max / 5;\n    const canvasH = this.canvasHistogram.current;\n    const ctxH = this.canvasHistogram.current.getContext(\"2d\");\n    ctxH.clearRect(0, 0, ctxH.canvas.width, ctxH.canvas.height);\n    canvasH.addEventListener('pointermove', evt => {\n      const mousePos = this.getMousePos(canvasH, evt);\n      this.setState({\n        histCount: hist256[mousePos.x]\n      });\n      let p = Math.round(mousePos.x * this.binSize);\n      this.setState({\n        valueScale: p + minHist\n      });\n    }, true); //console.log('value: ', (m-minHist)/binSize)\n\n    let value = Math.round((m - minHist) / binSize);\n    this.setState({\n      value: value\n    });\n    this.setState({\n      valueScale: m\n    });\n    this.setState({\n      histCount: hist256[value]\n    }); // draw WindowWidth area\n\n    ctxH.beginPath();\n    ctxH.fillStyle = 'rgba(210, 210, 210, 0.5)';\n    ctxH.fillRect(zero256 - stepWW + stepWC, 0, stepWW * 2, HIST_HEIGHT); // draw histogram\n\n    ctxH.beginPath();\n    ctxH.strokeStyle = 'rgba(0, 0, 0, 1.0)';\n\n    for (let i = 0; i < N_BINS; i++) {\n      let h = Math.round(hist256[i] / max * HIST_HEIGHT);\n      ctxH.moveTo(i, 0);\n      ctxH.lineTo(i, h);\n      ctxH.stroke();\n    } // draw WindowCenter cursor\n\n\n    ctxH.beginPath();\n    ctxH.strokeStyle = 'rgba(140, 140, 140, 0.5)';\n    ctxH.moveTo(zero256 + stepWC, 0);\n    ctxH.lineTo(zero256 + stepWC, HIST_HEIGHT);\n    ctxH.lineWidth = 1;\n    ctxH.stroke();\n    let lowX = zero256 - stepWW + stepWC;\n    let highX = zero256 + stepWW + stepWC; // draw gradient scale\n\n    const canvasG = this.canvasGradient.current;\n    const ctxG = canvasG.getContext(\"2d\");\n    ctxG.fillStyle = \"#000000\";\n    ctxG.fillRect(0, 0, lowX, 10);\n    let grd = ctxG.createLinearGradient(lowX, 0, highX + (lowX < 0 ? lowX : 0), 0);\n    grd.addColorStop(0, \"black\");\n    grd.addColorStop(1, \"white\");\n    ctxG.fillStyle = grd;\n    ctxG.fillRect(lowX, 0, highX, 10);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.canvasHistogram,\n      width: HIST_WIDTH,\n      height: HIST_HEIGHT,\n      style: {\n        backgroundColor: \"#FFFFFF\",\n        cursor: 'crosshair'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: styleCanvasGradient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.canvasGradient,\n      width: HIST_WIDTH,\n      height: 10,\n      style: {\n        backgroundColor: \"#FFFFFF\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: styleSlider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(Slider, {\n      value: this.state.value,\n      onChange: this.handleChangeValue,\n      \"aria-labelledby\": \"continuous-slider\",\n      color: \"secondary\",\n      min: 0,\n      max: 255,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      style: styleTable,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      style: styleTableTd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"min:\"), React.createElement(\"td\", {\n      style: styleTableTd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, this.state.minHist), React.createElement(\"td\", {\n      style: styleTableTd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"max:\"), React.createElement(\"td\", {\n      style: styleTableTd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, this.state.maxHist)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"mean:\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, parseFloat(this.state.mean).toFixed(3)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"std dev:\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, parseFloat(this.state.stdDev).toFixed(3))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"count:\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, this.state.histCount), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"value:\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, parseFloat(this.state.valueScale).toFixed(3)))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    activeDcmIndex: state.activeDcmIndex,\n    activeDcm: state.activeDcm\n  };\n};\n\nexport default connect(mapStateToProps)(Histogram);","map":{"version":3,"sources":["/media/mohammad/work/websites/cornerstone/dicom-viewer/src/components/Histogram.js"],"names":["React","PureComponent","Slider","connect","HIST_WIDTH","HIST_HEIGHT","N_BINS","style","width","padding","backgroundColor","styleSlider","marginTop","styleCanvasGradient","styleTable","borderCollapse","fontFamily","fontSize","styleTableTd","tableLayout","Histogram","constructor","props","state","activeDrags","deltaPosition","x","y","controlledPosition","value","histCount","valueScale","minHist","maxHist","mean","stdDev","handleChangeValue","event","newValue","setState","binSize","hist256","hide","onClose","onDrag","e","ui","deltaX","deltaY","onStart","onStop","canvasHistogram","createRef","canvasGradient","componentDidMount","canvasH","current","ctxH","getContext","translate","height","scale","updateCanvas","componentDidUpdate","activeDcm","clearRect","canvas","getMousePos","evt","rect","getBoundingClientRect","clientX","left","clientY","top","getRGBPixelsImage","pixelData","image","getPixelData","storedPixelData","Math","round","index","spIndex","row","column","rows","red","green","blue","alpha","getPixelsImage","getPixel","sp","isDicom","color","maxPixelValue","minPixelValue","intercept","lenHist","zero256","floor","abs","stepWW","windowWidth","stepWC","windowCenter","m","hist","Array","fill","columns","mo","slope","s","pow","sqrt","max","binStep","iHist","i","j","step","addEventListener","mousePos","p","beginPath","fillStyle","fillRect","strokeStyle","h","moveTo","lineTo","stroke","lineWidth","lowX","highX","canvasG","ctxG","grd","createLinearGradient","addColorStop","render","cursor","parseFloat","toFixed","mapStateToProps","activeDcmIndex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC,C,CACA;AACA;;AACA,OAAOC,MAAP,MAAmB,0BAAnB,C,CACA;;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CACA;AACA;AAEA;;AAEA,MAAMC,UAAU,GAAG,GAAnB;AACA,MAAMC,WAAW,GAAG,GAApB;AACA,MAAMC,MAAM,GAAG,GAAf;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,OADK;AAEZC,EAAAA,OAAO,EAAE,iBAFG;AAGZC,EAAAA,eAAe,EAAE;AAHL,CAAd;AAMA,MAAMC,WAAW,GAAG;AAClBH,EAAAA,KAAK,EAAE,OADW;AAElBI,EAAAA,SAAS,EAAE;AAFO,CAApB;AAKA,MAAMC,mBAAmB,GAAG;AAC1BD,EAAAA,SAAS,EAAE;AADe,CAA5B;AAIA,MAAME,UAAU,GAAG;AACjBC,EAAAA,cAAc,EAAE,UADC;AAEjBC,EAAAA,UAAU,EAAE,oBAFK;AAGjBC,EAAAA,QAAQ,EAAE,KAHO;AAIjBT,EAAAA,KAAK,EAAE;AAJU,CAAnB;AAOA,MAAMU,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,OADM;AAEnBX,EAAAA,KAAK,EAAE;AAFY,CAArB;;AAKA,MAAMY,SAAN,SAAwBnB,aAAxB,CAAsC;AAClCoB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAMnBC,KANmB,GAMX;AACNC,MAAAA,WAAW,EAAE,CADP;AAENC,MAAAA,aAAa,EAAE;AACbC,QAAAA,CAAC,EAAE,CADU;AACPC,QAAAA,CAAC,EAAE;AADI,OAFT;AAKNC,MAAAA,kBAAkB,EAAE;AAClBF,QAAAA,CAAC,EAAE,CAAC,GADc;AACTC,QAAAA,CAAC,EAAE;AADM,OALd;AAQNE,MAAAA,KAAK,EAAE,GARD;AASNC,MAAAA,SAAS,EAAE,CATL;AAUNC,MAAAA,UAAU,EAAE,CAVN;AAWNC,MAAAA,OAAO,EAAE,CAXH;AAYNC,MAAAA,OAAO,EAAE,CAZH;AAaNC,MAAAA,IAAI,EAAE,CAbA;AAcNC,MAAAA,MAAM,EAAE;AAdF,KANW;;AAAA,SA4RnBC,iBA5RmB,GA4RC,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACvC;AACA;AACA;AACA,WAAKC,QAAL,CAAc;AAACV,QAAAA,KAAK,EAAES;AAAR,OAAd;AACA,WAAKC,QAAL,CAAc;AAACR,QAAAA,UAAU,EAAGO,QAAQ,GAAC,KAAKE,OAAf,GAAwB,KAAKjB,KAAL,CAAWS;AAAhD,OAAd;AACA,WAAKO,QAAL,CAAc;AAACT,QAAAA,SAAS,EAAE,KAAKW,OAAL,CAAaH,QAAb;AAAZ,OAAd;AACD,KAnSkB;;AAAA,SAqSnBI,IArSmB,GAqSZ,MAAM;AACX,WAAKpB,KAAL,CAAWqB,OAAX;AACD,KAvSkB;;AAAA,SAySnBC,MAzSmB,GAySV,CAACC,CAAD,EAAIC,EAAJ,KAAW;AAAA,oCACH,KAAKvB,KAAL,CAAWE,aADR;AAAA,YACXC,CADW,yBACXA,CADW;AAAA,YACRC,CADQ,yBACRA,CADQ;AAElB,WAAKY,QAAL,CAAc;AACZd,QAAAA,aAAa,EAAE;AACbC,UAAAA,CAAC,EAAEA,CAAC,GAAGoB,EAAE,CAACC,MADG;AAEbpB,UAAAA,CAAC,EAAEA,CAAC,GAAGmB,EAAE,CAACE;AAFG;AADH,OAAd;AAMD,KAjTkB;;AAAA,SAmTnBC,OAnTmB,GAmTT,MAAM;AACd,WAAKV,QAAL,CAAc;AAACf,QAAAA,WAAW,EAAE,KAAKD,KAAL,CAAWC,WAAX,GAAuB;AAArC,OAAd;AACD,KArTkB;;AAAA,SAuTnB0B,MAvTmB,GAuTV,MAAM;AACb,WAAKX,QAAL,CAAc;AAACf,QAAAA,WAAW,EAAE,KAAKD,KAAL,CAAWC,WAAX,GAAuB;AAArC,OAAd;AACD,KAzTkB;;AAEjB,SAAK2B,eAAL,GAAuBnD,KAAK,CAACoD,SAAN,EAAvB;AACA,SAAKC,cAAL,GAAsBrD,KAAK,CAACoD,SAAN,EAAtB;AACD;;AAmBDE,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA,UAAMC,OAAO,GAAG,KAAKJ,eAAL,CAAqBK,OAArC;AACA,UAAMC,IAAI,GAAG,KAAKN,eAAL,CAAqBK,OAArB,CAA6BE,UAA7B,CAAwC,IAAxC,CAAb;AACAD,IAAAA,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkBJ,OAAO,CAACK,MAA1B;AACAH,IAAAA,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf;AAEA,SAAKC,YAAL;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB;AACA,QAAI,KAAKzC,KAAL,CAAW0C,SAAX,KAAyB,IAA7B,EAAmC;AACjC,YAAMP,IAAI,GAAG,KAAKN,eAAL,CAAqBK,OAArB,CAA6BE,UAA7B,CAAwC,IAAxC,CAAb;AACAD,MAAAA,IAAI,CAACQ,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqBR,IAAI,CAACS,MAAL,CAAY1D,KAAjC,EAAwCiD,IAAI,CAACS,MAAL,CAAYN,MAApD;AACA;AACD;;AACD,SAAKE,YAAL;AACD;;AAEDK,EAAAA,WAAW,CAACD,MAAD,EAASE,GAAT,EAAc;AACvB,UAAMC,IAAI,GAAGH,MAAM,CAACI,qBAAP,EAAb;AACA,WAAO;AACL5C,MAAAA,CAAC,EAAE0C,GAAG,CAACG,OAAJ,GAAcF,IAAI,CAACG,IADjB;AAEL7C,MAAAA,CAAC,EAAEyC,GAAG,CAACK,OAAJ,GAAcJ,IAAI,CAACK;AAFjB,KAAP;AAID;;AAEDC,EAAAA,iBAAiB,CAACjD,CAAD,EAAIC,CAAJ,EAAOnB,KAAP,EAAcoD,MAAd,EAAsB;AACrC,UAAMgB,SAAS,GAAG,KAAKtD,KAAL,CAAW0C,SAAX,CAAqBa,KAArB,CAA2BC,YAA3B,EAAlB;AACA,UAAMC,eAAe,GAAG,EAAxB;AACArD,IAAAA,CAAC,GAAGsD,IAAI,CAACC,KAAL,CAAWvD,CAAX,CAAJ;AACAC,IAAAA,CAAC,GAAGqD,IAAI,CAACC,KAAL,CAAWtD,CAAX,CAAJ;AACA,QAAIuD,KAAK,GAAG,CAAZ;AACA,QAAIC,OAAJ,EAAaC,GAAb,EAAkBC,MAAlB;;AAEA,SAAKD,GAAG,GAAG,CAAX,EAAcA,GAAG,GAAGxB,MAApB,EAA4BwB,GAAG,EAA/B,EAAmC;AACjC,WAAKC,MAAM,GAAG,CAAd,EAAiBA,MAAM,GAAG7E,KAA1B,EAAiC6E,MAAM,EAAvC,EAA2C;AACzCF,QAAAA,OAAO,GAAG,CAAC,CAACC,GAAG,GAAGzD,CAAP,IAAY,KAAKL,KAAL,CAAW0C,SAAX,CAAqBa,KAArB,CAA2BS,IAAvC,IAA+CD,MAAM,GAAG3D,CAAxD,CAAD,IAA+D,CAAzE;AACA,cAAM6D,GAAG,GAAGX,SAAS,CAACO,OAAD,CAArB;AACA,cAAMK,KAAK,GAAGZ,SAAS,CAACO,OAAO,GAAG,CAAX,CAAvB;AACA,cAAMM,IAAI,GAAGb,SAAS,CAACO,OAAO,GAAG,CAAX,CAAtB;AACA,cAAMO,KAAK,GAAGd,SAAS,CAACO,OAAO,GAAG,CAAX,CAAvB;AAEAJ,QAAAA,eAAe,CAACG,KAAK,EAAN,CAAf,GAA2BK,GAA3B;AACAR,QAAAA,eAAe,CAACG,KAAK,EAAN,CAAf,GAA2BM,KAA3B;AACAT,QAAAA,eAAe,CAACG,KAAK,EAAN,CAAf,GAA2BO,IAA3B;AACAV,QAAAA,eAAe,CAACG,KAAK,EAAN,CAAf,GAA2BQ,KAA3B;AACD;AACF;;AACD,WAAOX,eAAP;AACD;;AAEDY,EAAAA,cAAc,CAACjE,CAAD,EAAIC,CAAJ,EAAOnB,KAAP,EAAcoD,MAAd,EAAsB;AAClC,UAAMgB,SAAS,GAAG,KAAKtD,KAAL,CAAW0C,SAAX,CAAqBa,KAArB,CAA2BC,YAA3B,EAAlB;AACA,UAAMC,eAAe,GAAG,EAAxB;AACArD,IAAAA,CAAC,GAAGsD,IAAI,CAACC,KAAL,CAAWvD,CAAX,CAAJ;AACAC,IAAAA,CAAC,GAAGqD,IAAI,CAACC,KAAL,CAAWtD,CAAX,CAAJ;AACA,QAAIuD,KAAK,GAAG,CAAZ;AACA,QAAIC,OAAJ,EAAaC,GAAb,EAAkBC,MAAlB;;AAEA,SAAKD,GAAG,GAAG,CAAX,EAAcA,GAAG,GAAGxB,MAApB,EAA4BwB,GAAG,EAA/B,EAAmC;AACjC,WAAKC,MAAM,GAAG,CAAd,EAAiBA,MAAM,GAAG7E,KAA1B,EAAiC6E,MAAM,EAAvC,EAA2C;AACzCF,QAAAA,OAAO,GAAI,CAACC,GAAG,GAAGzD,CAAP,IAAY,KAAKL,KAAL,CAAW0C,SAAX,CAAqBa,KAArB,CAA2BS,IAAvC,IAA+CD,MAAM,GAAG3D,CAAxD,CAAX;AACAqD,QAAAA,eAAe,CAACG,KAAK,EAAN,CAAf,GAA2BN,SAAS,CAACO,OAAD,CAApC;AACD;AACF;;AACD,WAAOJ,eAAP;AACD;;AAEDa,EAAAA,QAAQ,CAAClE,CAAD,EAAIC,CAAJ,EAAO;AACb,QAAIkE,EAAE,GAAG,EAAT;;AACA,QAAI,KAAKvE,KAAL,CAAW0C,SAAX,CAAqB8B,OAAzB,EAAkC;AAChC,UAAI,KAAKxE,KAAL,CAAW0C,SAAX,CAAqBa,KAArB,CAA2BkB,KAA/B,EAAsC;AACpC;AACA;AACAF,QAAAA,EAAE,GAAG,KAAKlB,iBAAL,CAAuBjD,CAAvB,EAA0BC,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,CAAL;AACD,OAJD,MAIO;AACL;AACAkE,QAAAA,EAAE,GAAG,KAAKF,cAAL,CAAoBjE,CAApB,EAAuBC,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAL;AACD;AACF,KATD,MASO;AACLkE,MAAAA,EAAE,GAAG,KAAKlB,iBAAL,CAAuBjD,CAAvB,EAA0BC,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,CAAL;AACD;;AACD,WAAOkE,EAAE,CAAC,CAAD,CAAT;AACD;;AAED/B,EAAAA,YAAY,GAAG;AACb,UAAMe,KAAK,GAAG,KAAKvD,KAAL,CAAW0C,SAAX,CAAqBa,KAAnC,CADa,CAEb;;AACA,UAAMmB,aAAa,GAAGnB,KAAK,CAACmB,aAA5B;AACA,UAAMC,aAAa,GAAGpB,KAAK,CAACoB,aAA5B,CAJa,CAKb;;AACA,UAAMjE,OAAO,GAAGiE,aAAa,GAACpB,KAAK,CAACqB,SAApC;AACA,UAAMjE,OAAO,GAAG+D,aAAa,GAACnB,KAAK,CAACqB,SAApC;AACA,UAAMC,OAAO,GAAGlE,OAAO,GAACD,OAAR,GAAgB,CAAhC;AACA,UAAMQ,OAAO,GAAG2D,OAAO,GAAG7F,MAA1B;AACA,QAAI8F,OAAO,GAAGpB,IAAI,CAACqB,KAAL,CAAWrB,IAAI,CAACsB,GAAL,CAAStE,OAAT,IAAoBQ,OAA/B,CAAd;AACA,QAAI+D,MAAM,GAAGvB,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAAC2B,WAAN,GAAoBhE,OAApB,GAA8B,CAAzC,CAAb;AACA,QAAIiE,MAAM,GAAGzB,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAAC6B,YAAN,GAAqBlE,OAAhC,CAAb;AAEA,SAAKD,QAAL,CAAc;AAACP,MAAAA,OAAO,EAAEA;AAAV,KAAd;AACA,SAAKO,QAAL,CAAc;AAACN,MAAAA,OAAO,EAAEA;AAAV,KAAd;AACA,SAAKO,OAAL,GAAeA,OAAf,CAhBa,CAkBb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAImE,CAAC,GAAG,CAAR,CAtCa,CAsCH;AACV;;AACA,QAAIC,IAAI,GAAGC,KAAK,CAACV,OAAD,CAAL,CAAeW,IAAf,CAAoB,CAApB,CAAX;;AACA,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,KAAK,CAACkC,OAA1B,EAAmCpF,CAAC,EAApC,EAAwC;AACtC,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmD,KAAK,CAACS,IAA1B,EAAgC5D,CAAC,EAAjC,EAAqC;AACnC,YAAImE,EAAE,GAAG,KAAKD,QAAL,CAAclE,CAAd,EAAiBC,CAAjB,CAAT;AACA,YAAIqF,EAAE,GAAGnB,EAAE,GAAGhB,KAAK,CAACoC,KAAX,GAAmBpC,KAAK,CAACqB,SAAlC;AACAU,QAAAA,IAAI,CAACI,EAAE,GAAChF,OAAJ,CAAJ,IAAoB,CAApB;AACA2E,QAAAA,CAAC,IAAIK,EAAL;AACD;AACF;;AAEDL,IAAAA,CAAC,GAAGA,CAAC,IAAI9B,KAAK,CAACkC,OAAN,GAAgBlC,KAAK,CAACS,IAA1B,CAAL;AACA,SAAK/C,QAAL,CAAc;AAACL,MAAAA,IAAI,EAAEyE;AAAP,KAAd,EAnDa,CAqDb;AACA;AAEA;;AACA,QAAIO,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIvF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,KAAK,CAACkC,OAA1B,EAAmCpF,CAAC,EAApC,EACE,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmD,KAAK,CAACS,IAA1B,EAAgC5D,CAAC,EAAjC,EAAqC;AACnC,UAAImE,EAAE,GAAG,KAAKD,QAAL,CAAclE,CAAd,EAAiBC,CAAjB,CAAT;AACA,UAAIqF,EAAE,GAAGnB,EAAE,GAAGhB,KAAK,CAACoC,KAAX,GAAmBpC,KAAK,CAACqB,SAAlC;AACAgB,MAAAA,CAAC,IAAIlC,IAAI,CAACmC,GAAL,CAASH,EAAE,GAACL,CAAZ,EAAe,CAAf,CAAL;AACD;;AACHO,IAAAA,CAAC,GAAGlC,IAAI,CAACoC,IAAL,CAAUF,CAAC,IAAIrC,KAAK,CAACkC,OAAN,GAAgBlC,KAAK,CAACS,IAA1B,CAAX,CAAJ;AACA,SAAK/C,QAAL,CAAc;AAACJ,MAAAA,MAAM,EAAE+E;AAAT,KAAd,EAjEa,CAmEb;;AACA,QAAIzE,OAAO,GAAGoE,KAAK,CAACvG,MAAD,CAAL,CAAcwG,IAAd,CAAmB,CAAnB,CAAd;AACA,QAAIO,GAAG,GAAG,CAAV;;AAEA,QAAI7E,OAAO,GAAG,CAAd,EAAiB;AACf,UAAI8E,OAAO,GAAGtC,IAAI,CAACC,KAAL,CAAW3E,MAAM,GAAG6F,OAApB,CAAd;AACA,UAAIoB,KAAK,GAAG,CAAZ;AACA,UAAIC,CAAC,GAAG,CAAR;;AACA,aAAOA,CAAC,GAAGlH,MAAX,EAAmB;AACjB,aAAK,IAAImH,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGH,OAAlB,EAA2BG,CAAC,EAA5B,EAAgC;AAC9BhF,UAAAA,OAAO,CAAC+E,CAAD,CAAP,GAAaD,KAAK,GAAGpB,OAAR,GAAkBS,IAAI,CAACW,KAAD,CAAtB,GAAgC,CAA7C;AACA,cAAIF,GAAG,GAAG5E,OAAO,CAAC+E,CAAD,CAAjB,EAAsBH,GAAG,GAAG5E,OAAO,CAAC+E,CAAD,CAAb;AACtBA,UAAAA,CAAC;AACF;;AACDD,QAAAA,KAAK;AACN;AAED;;;;;;;;;;;AAUD,KAvBD,MAuBO;AACL,UAAIG,IAAI,GAAG,CAAX;;AACA,WAAK,IAAIF,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGlH,MAAlB,EAA0BkH,CAAC,EAA3B,EAA+B;AAC7B,aAAK,IAAIC,CAAC,GAACC,IAAX,EAAiBD,CAAC,GAAGzC,IAAI,CAACC,KAAL,CAAWyC,IAAI,GAAClF,OAAhB,CAArB,EAA+CiF,CAAC,EAAhD,EAAoD;AAClD,cAAIA,CAAC,IAAItB,OAAT,EAAkB;AAClB1D,UAAAA,OAAO,CAAC+E,CAAD,CAAP,IAAcZ,IAAI,CAACa,CAAD,CAAlB;AACD;;AACD,YAAIJ,GAAG,GAAG5E,OAAO,CAAC+E,CAAD,CAAjB,EAAsB;AAAEH,UAAAA,GAAG,GAAG5E,OAAO,CAAC+E,CAAD,CAAb;AAAkB;;AAC1CE,QAAAA,IAAI,GAAG1C,IAAI,CAACC,KAAL,CAAWyC,IAAI,GAAClF,OAAhB,CAAP;AACD;AACF;;AAED,SAAKC,OAAL,GAAeA,OAAf,CA1Ga,CA4Gb;AACA;;AAEA,QAAI4E,GAAG,GAAGhH,WAAN,GAAoB,GAAxB,EAA6BgH,GAAG,GAAGA,GAAG,GAAG,CAAZ;AAE7B,UAAM9D,OAAO,GAAG,KAAKJ,eAAL,CAAqBK,OAArC;AACA,UAAMC,IAAI,GAAG,KAAKN,eAAL,CAAqBK,OAArB,CAA6BE,UAA7B,CAAwC,IAAxC,CAAb;AACAD,IAAAA,IAAI,CAACQ,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqBR,IAAI,CAACS,MAAL,CAAY1D,KAAjC,EAAwCiD,IAAI,CAACS,MAAL,CAAYN,MAApD;AAEAL,IAAAA,OAAO,CAACoE,gBAAR,CAAyB,aAAzB,EAAyCvD,GAAD,IAAS;AAC/C,YAAMwD,QAAQ,GAAG,KAAKzD,WAAL,CAAiBZ,OAAjB,EAA0Ba,GAA1B,CAAjB;AACA,WAAK7B,QAAL,CAAc;AAACT,QAAAA,SAAS,EAAEW,OAAO,CAACmF,QAAQ,CAAClG,CAAV;AAAnB,OAAd;AACA,UAAImG,CAAC,GAAG7C,IAAI,CAACC,KAAL,CAAW2C,QAAQ,CAAClG,CAAT,GAAa,KAAKc,OAA7B,CAAR;AACA,WAAKD,QAAL,CAAc;AAACR,QAAAA,UAAU,EAAE8F,CAAC,GAAC7F;AAAf,OAAd;AACD,KALD,EAKG,IALH,EArHa,CA4Hb;;AACA,QAAIH,KAAK,GAAGmD,IAAI,CAACC,KAAL,CAAW,CAAC0B,CAAC,GAAC3E,OAAH,IAAYQ,OAAvB,CAAZ;AACA,SAAKD,QAAL,CAAc;AAACV,MAAAA,KAAK,EAAEA;AAAR,KAAd;AACA,SAAKU,QAAL,CAAc;AAACR,MAAAA,UAAU,EAAE4E;AAAb,KAAd;AACA,SAAKpE,QAAL,CAAc;AAACT,MAAAA,SAAS,EAAEW,OAAO,CAACZ,KAAD;AAAnB,KAAd,EAhIa,CAkIb;;AACA4B,IAAAA,IAAI,CAACqE,SAAL;AACArE,IAAAA,IAAI,CAACsE,SAAL,GAAiB,0BAAjB;AACAtE,IAAAA,IAAI,CAACuE,QAAL,CAAc5B,OAAO,GAACG,MAAR,GAAeE,MAA7B,EAAqC,CAArC,EAAwCF,MAAM,GAAC,CAA/C,EAAkDlG,WAAlD,EArIa,CAuIb;;AACAoD,IAAAA,IAAI,CAACqE,SAAL;AACArE,IAAAA,IAAI,CAACwE,WAAL,GAAmB,oBAAnB;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlH,MAApB,EAA4BkH,CAAC,EAA7B,EAAiC;AAC/B,UAAIU,CAAC,GAAGlD,IAAI,CAACC,KAAL,CAAYxC,OAAO,CAAC+E,CAAD,CAAP,GAAWH,GAAZ,GAAiBhH,WAA5B,CAAR;AACAoD,MAAAA,IAAI,CAAC0E,MAAL,CAAYX,CAAZ,EAAe,CAAf;AACA/D,MAAAA,IAAI,CAAC2E,MAAL,CAAYZ,CAAZ,EAAeU,CAAf;AACAzE,MAAAA,IAAI,CAAC4E,MAAL;AACD,KA/IY,CAiJb;;;AACA5E,IAAAA,IAAI,CAACqE,SAAL;AACArE,IAAAA,IAAI,CAACwE,WAAL,GAAmB,0BAAnB;AACAxE,IAAAA,IAAI,CAAC0E,MAAL,CAAY/B,OAAO,GAACK,MAApB,EAA4B,CAA5B;AACAhD,IAAAA,IAAI,CAAC2E,MAAL,CAAYhC,OAAO,GAACK,MAApB,EAA4BpG,WAA5B;AACAoD,IAAAA,IAAI,CAAC6E,SAAL,GAAiB,CAAjB;AACA7E,IAAAA,IAAI,CAAC4E,MAAL;AAEA,QAAIE,IAAI,GAAGnC,OAAO,GAACG,MAAR,GAAeE,MAA1B;AACA,QAAI+B,KAAK,GAAGpC,OAAO,GAACG,MAAR,GAAeE,MAA3B,CA1Ja,CA4Jb;;AACA,UAAMgC,OAAO,GAAG,KAAKpF,cAAL,CAAoBG,OAApC;AACA,UAAMkF,IAAI,GAAGD,OAAO,CAAC/E,UAAR,CAAmB,IAAnB,CAAb;AAEAgF,IAAAA,IAAI,CAACX,SAAL,GAAiB,SAAjB;AACAW,IAAAA,IAAI,CAACV,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoBO,IAApB,EAA0B,EAA1B;AAEA,QAAII,GAAG,GAAGD,IAAI,CAACE,oBAAL,CAA0BL,IAA1B,EAAgC,CAAhC,EAAmCC,KAAK,IAAED,IAAI,GAAG,CAAP,GAAWA,IAAX,GAAkB,CAApB,CAAxC,EAAgE,CAAhE,CAAV;AACAI,IAAAA,GAAG,CAACE,YAAJ,CAAiB,CAAjB,EAAoB,OAApB;AACAF,IAAAA,GAAG,CAACE,YAAJ,CAAiB,CAAjB,EAAoB,OAApB;AACAH,IAAAA,IAAI,CAACX,SAAL,GAAiBY,GAAjB;AACAD,IAAAA,IAAI,CAACV,QAAL,CAAcO,IAAd,EAAoB,CAApB,EAAuBC,KAAvB,EAA8B,EAA9B;AACD;;AAiCDM,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAEvI,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAE,KAAK4C,eADZ;AAEE,MAAA,KAAK,EAAE/C,UAFT;AAGE,MAAA,MAAM,EAAEC,WAHV;AAIE,MAAA,KAAK,EAAE;AAACK,QAAAA,eAAe,EAAE,SAAlB;AAA6BqI,QAAAA,MAAM,EAAC;AAApC,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EASE;AAAK,MAAA,KAAK,EAAElI,mBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,GAAG,EAAE,KAAKwC,cAAlB;AAAkC,MAAA,KAAK,EAAEjD,UAAzC;AAAqD,MAAA,MAAM,EAAE,EAA7D;AAAiE,MAAA,KAAK,EAAE;AAACM,QAAAA,eAAe,EAAE;AAAlB,OAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,EAYE;AAAK,MAAA,KAAK,EAAEC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAE,KAAKY,KAAL,CAAWM,KADpB;AAEE,MAAA,QAAQ,EAAE,KAAKO,iBAFjB;AAGE,yBAAgB,mBAHlB;AAIE,MAAA,KAAK,EAAC,WAJR;AAKE,MAAA,GAAG,EAAE,CALP;AAME,MAAA,GAAG,EAAE,GANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAZF,EAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,KAAK,EAAEtB,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,KAAK,EAAEI,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAI,MAAA,KAAK,EAAEA,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0B,KAAKK,KAAL,CAAWS,OAArC,CAFF,EAGE;AAAI,MAAA,KAAK,EAAEd,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAIE;AAAI,MAAA,KAAK,EAAEA,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0B,KAAKK,KAAL,CAAWU,OAArC,CAJF,CADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK+G,UAAU,CAAC,KAAKzH,KAAL,CAAWW,IAAZ,CAAV,CAA4B+G,OAA5B,CAAoC,CAApC,CAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,UAAU,CAAC,KAAKzH,KAAL,CAAWY,MAAZ,CAAV,CAA8B8G,OAA9B,CAAsC,CAAtC,CAAL,CAJF,CAPF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAK1H,KAAL,CAAWO,SAAhB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKkH,UAAU,CAAC,KAAKzH,KAAL,CAAWQ,UAAZ,CAAV,CAAkCkH,OAAlC,CAA0C,CAA1C,CAAL,CAJF,CAbF,CADF,CADF,CAtBF,CADF;AAiDH;;AA9WmC;;AAiXtC,MAAMC,eAAe,GAAI3H,KAAD,IAAW;AACjC,SAAO;AACL4H,IAAAA,cAAc,EAAE5H,KAAK,CAAC4H,cADjB;AAELnF,IAAAA,SAAS,EAAEzC,KAAK,CAACyC;AAFZ,GAAP;AAID,CALD;;AAOA,eAAe7D,OAAO,CAAC+I,eAAD,CAAP,CAAyB9H,SAAzB,CAAf","sourcesContent":["import React, { PureComponent } from 'react'\n//import Draggable from 'react-draggable'\n//import IconButton from '@material-ui/core/IconButton'\nimport Slider from '@material-ui/core/Slider'\n//import HighlightOffIcon from '@material-ui/icons/HighlightOff'\nimport {connect} from 'react-redux'\n//import * as cornerstone from 'cornerstone-core'\n// import { import as csTools } from 'cornerstone-tools'\n\n// const getRGBPixels = csTools('util/getRGBPixels')\n\nconst HIST_WIDTH = 256\nconst HIST_HEIGHT = 128\nconst N_BINS = 256\n\nconst style = {\n  width: '273px', \n  padding: '8px 8px 8px 8px', \n  backgroundColor: '#444444',\n}\n\nconst styleSlider = {\n  width: '255px',\n  marginTop: '-9px',\n}\n\nconst styleCanvasGradient = {\n  marginTop: '-9px',\n}\n\nconst styleTable = {\n  borderCollapse: 'collapse',\n  fontFamily: 'Courier, monospace',\n  fontSize: '67%',\n  width: '100%',\n}\n\nconst styleTableTd = {\n  tableLayout: 'fixed',\n  width: '25%',\n}\n\nclass Histogram extends PureComponent {\n    constructor(props) {\n      super(props)\n      this.canvasHistogram = React.createRef()\n      this.canvasGradient = React.createRef()\n    }\n\n    state = {\n      activeDrags: 0,\n      deltaPosition: {\n        x: 0, y: 0\n      },\n      controlledPosition: {\n        x: -400, y: 200\n      },\n      value: 128,\n      histCount: 0,\n      valueScale: 0,\n      minHist: 0,\n      maxHist: 0,\n      mean: 0,\n      stdDev: 0,\n    }\n\n    componentDidMount() {\n      //console.log('Histogram - componentDidMount: ')\n      //this.image = this.props.activeDcm.image\n      //this.element = this.props.activeDcm.element\n      //this.isDicom = this.props.activeDcm.isDicom\n      //this.pixelData = this.props.activeDcm.image.getPixelData()\n      const canvasH = this.canvasHistogram.current\n      const ctxH = this.canvasHistogram.current.getContext(\"2d\")\n      ctxH.translate(0, canvasH.height)\n      ctxH.scale(1, -1)\n\n      this.updateCanvas()     \n    }\n    \n    componentDidUpdate() {\n      //console.log('Histogram - componentDidUpdate: ')\n      if (this.props.activeDcm === null) {\n        const ctxH = this.canvasHistogram.current.getContext(\"2d\")\n        ctxH.clearRect(0, 0, ctxH.canvas.width, ctxH.canvas.height)\n        return\n      }\n      this.updateCanvas() \n    }\n\n    getMousePos(canvas, evt) {\n      const rect = canvas.getBoundingClientRect()\n      return {\n        x: evt.clientX - rect.left,\n        y: evt.clientY - rect.top\n      }\n    }\n\n    getRGBPixelsImage(x, y, width, height) {\n      const pixelData = this.props.activeDcm.image.getPixelData()\n      const storedPixelData = []\n      x = Math.round(x)\n      y = Math.round(y)   \n      let index = 0\n      let spIndex, row, column\n    \n      for (row = 0; row < height; row++) {\n        for (column = 0; column < width; column++) {\n          spIndex = ((row + y) * this.props.activeDcm.image.rows + (column + x)) * 4\n          const red = pixelData[spIndex]\n          const green = pixelData[spIndex + 1]\n          const blue = pixelData[spIndex + 2]\n          const alpha = pixelData[spIndex + 3]\n  \n          storedPixelData[index++] = red\n          storedPixelData[index++] = green\n          storedPixelData[index++] = blue\n          storedPixelData[index++] = alpha\n        }\n      }\n      return storedPixelData\n    }\n\n    getPixelsImage(x, y, width, height) {\n      const pixelData = this.props.activeDcm.image.getPixelData()\n      const storedPixelData = []\n      x = Math.round(x)\n      y = Math.round(y)   \n      let index = 0\n      let spIndex, row, column\n    \n      for (row = 0; row < height; row++) {\n        for (column = 0; column < width; column++) {\n          spIndex = ((row + y) * this.props.activeDcm.image.rows + (column + x)) \n          storedPixelData[index++] = pixelData[spIndex]\n        }\n      }\n      return storedPixelData\n    }    \n\n    getPixel(x, y) {\n      let sp = []\n      if (this.props.activeDcm.isDicom) {\n        if (this.props.activeDcm.image.color) {\n          //sp = getRGBPixels(this.element, x, y, 1, 1)\n          //sp = cornerstone.getStoredPixels(this.element, x, y, 1, 1)\n          sp = this.getRGBPixelsImage(x, y, 1, 1)\n        } else {\n          // sp = cornerstone.getStoredPixels(this.props.activeDcm.element, x, y, 1, 1)\n          sp = this.getPixelsImage(x, y, 1, 1)\n        }\n      } else {\n        sp = this.getRGBPixelsImage(x, y, 1, 1)\n      }\n      return sp[0]\n    }\n\n    updateCanvas() {\n      const image = this.props.activeDcm.image\n      //const element = this.props.element\n      const maxPixelValue = image.maxPixelValue\n      const minPixelValue = image.minPixelValue\n      //const k = Math.pow(2, this.props.bitsStored)\n      const minHist = minPixelValue+image.intercept\n      const maxHist = maxPixelValue+image.intercept\n      const lenHist = maxHist-minHist+1\n      const binSize = lenHist / N_BINS\n      let zero256 = Math.floor(Math.abs(minHist) / binSize)\n      let stepWW = Math.round(image.windowWidth / binSize / 2)\n      let stepWC = Math.round(image.windowCenter / binSize)\n\n      this.setState({minHist: minHist})\n      this.setState({maxHist: maxHist})\n      this.binSize = binSize\n\n      //console.log('activeDcm: ', this.props.activeDcm)\n      //console.log('image: ', )\n      //console.log('getPixelData: ', image.getPixelData())\n      //console.log('columns: ', image.columns)\n      //console.log('rows: ', image.rows)\n      //console.log('isDicom: ', this.props.activeDcm.isDicom)\n      //console.log('bitsStored: ', k)\n      //console.log('minHist: ', minHist)\n      //console.log('maxHist: ', maxHist)\n      //console.log('lenHist: ', lenHist)\n      //console.log('binSize: ', binSize)\n      //console.log('zeroHist: ', zero256)\n      //console.log('stepWW: ', stepWW)\n      //console.log('stepWC: ', stepWC)\n      //console.log('zero256-stepWW: ', zero256-stepWW)\n      //console.log('zero256+stepWW: ', zero256+stepWW)   \n      //console.log('image.color: ', image.color)\n      //console.log('image.slope: ', image.slope)\n      //console.log('image.intercept: ', image.intercept)\n\n      let m = 0 // the mean\n      // build histogram\n      let hist = Array(lenHist).fill(0) \n      for (let y = 0; y < image.columns; y++) {\n        for (let x = 0; x < image.rows; x++) {\n          let sp = this.getPixel(x, y)\n          let mo = sp * image.slope + image.intercept\n          hist[mo-minHist] += 1\n          m += mo\n        } \n      }  \n\n      m = m / (image.columns * image.rows)\n      this.setState({mean: m})  \n\n      //console.log('hist: ', hist)\n      //console.log('mean: ', m)\n\n      // calculate standard deviation\n      let s = 0\n      for (let y = 0; y < image.columns; y++)\n        for (let x = 0; x < image.rows; x++) {\n          let sp = this.getPixel(x, y)\n          let mo = sp * image.slope + image.intercept\n          s += Math.pow(mo-m, 2)\n        }  \n      s = Math.sqrt(s / (image.columns * image.rows))\n      this.setState({stdDev: s})\n\n      // binning the histogram \n      let hist256 = Array(N_BINS).fill(0) \n      let max = 0\n\n      if (binSize < 1) {\n        let binStep = Math.round(N_BINS / lenHist)\n        let iHist = 0\n        let i = 0\n        while (i < N_BINS) {\n          for (let j=0; j < binStep; j++) { \n            hist256[i] = iHist < lenHist ? hist[iHist] : 0\n            if (max < hist256[i]) max = hist256[i]  \n            i++\n          }   \n          iHist++     \n        }\n\n        /*for (let i=0; i < N_BINS; i+=binStep) {\n          const k = Math.floor(i)\n          //console.log(`i: ${k} `)\n          for (let j=0; j < Math.round(binStep); j++) { \n            console.log(`i: ${k} - j: ${j} - iHist: ${iHist} - hist[iHist]: ${hist[iHist]}`)\n            hist256[k+j] = hist[iHist]\n          }\n          iHist++\n          if (max < hist256[k]) max = hist256[k] \n        }*/\n      } else {\n        let step = 0\n        for (let i=0; i < N_BINS; i++) {\n          for (let j=step; j < Math.round(step+binSize); j++) {\n            if (j >= lenHist) break\n            hist256[i] += hist[j]\n          }\n          if (max < hist256[i]) { max = hist256[i] }\n          step = Math.round(step+binSize)\n        }        \n      }\n\n      this.hist256 = hist256\n\n      //console.log('hist256: ', hist256)\n      //console.log('max: ', max)\n\n      if (max / HIST_HEIGHT > 100) max = max / 5\n      \n      const canvasH = this.canvasHistogram.current\n      const ctxH = this.canvasHistogram.current.getContext(\"2d\")\n      ctxH.clearRect(0, 0, ctxH.canvas.width, ctxH.canvas.height)\n\n      canvasH.addEventListener('pointermove', (evt) => {\n        const mousePos = this.getMousePos(canvasH, evt)\n        this.setState({histCount: hist256[mousePos.x]})\n        let p = Math.round(mousePos.x * this.binSize)\n        this.setState({valueScale: p+minHist})\n      }, true)\n\n      //console.log('value: ', (m-minHist)/binSize)\n      let value = Math.round((m-minHist)/binSize)\n      this.setState({value: value})\n      this.setState({valueScale: m})\n      this.setState({histCount: hist256[value]})\n\n      // draw WindowWidth area\n      ctxH.beginPath()\n      ctxH.fillStyle = 'rgba(210, 210, 210, 0.5)'\n      ctxH.fillRect(zero256-stepWW+stepWC, 0, stepWW*2, HIST_HEIGHT)\n\n      // draw histogram\n      ctxH.beginPath()\n      ctxH.strokeStyle = 'rgba(0, 0, 0, 1.0)'\n      for (let i = 0; i < N_BINS; i++) {\n        let h = Math.round((hist256[i]/max)*HIST_HEIGHT)\n        ctxH.moveTo(i, 0)\n        ctxH.lineTo(i, h)\n        ctxH.stroke()\n      }\n      \n      // draw WindowCenter cursor\n      ctxH.beginPath()\n      ctxH.strokeStyle = 'rgba(140, 140, 140, 0.5)'\n      ctxH.moveTo(zero256+stepWC, 0)\n      ctxH.lineTo(zero256+stepWC, HIST_HEIGHT)\n      ctxH.lineWidth = 1\n      ctxH.stroke()\n          \n      let lowX = zero256-stepWW+stepWC\n      let highX = zero256+stepWW+stepWC\n\n      // draw gradient scale\n      const canvasG = this.canvasGradient.current\n      const ctxG = canvasG.getContext(\"2d\")\n\n      ctxG.fillStyle = \"#000000\"\n      ctxG.fillRect(0, 0, lowX, 10)\n\n      let grd = ctxG.createLinearGradient(lowX, 0, highX+(lowX < 0 ? lowX : 0), 0)\n      grd.addColorStop(0, \"black\")\n      grd.addColorStop(1, \"white\")\n      ctxG.fillStyle = grd\n      ctxG.fillRect(lowX, 0, highX, 10)\n    }\n        \n    handleChangeValue = (event, newValue) => {\n      //console.log('newValue: ', newValue)\n      //console.log('(newValue*this.binSize)+this.state.minHist: ', (newValue*this.binSize)+this.state.minHist)\n      //console.log('this.hist256[newValue]: ', this.hist256[newValue])\n      this.setState({value: newValue})\n      this.setState({valueScale: (newValue*this.binSize)+this.state.minHist})\n      this.setState({histCount: this.hist256[newValue]})\n    }\n      \n    hide = () => {\n      this.props.onClose()\n    }\n\n    onDrag = (e, ui) => {\n      const {x, y} = this.state.deltaPosition;\n      this.setState({\n        deltaPosition: {\n          x: x + ui.deltaX,\n          y: y + ui.deltaY,\n        }\n      })\n    }\n  \n    onStart = () => {\n      this.setState({activeDrags: this.state.activeDrags+1})\n    }\n  \n    onStop = () => {\n      this.setState({activeDrags: this.state.activeDrags-1})\n    }\n\n    render() {\n      return (\n        <div style={style}>\n          <div>\n            <canvas \n              ref={this.canvasHistogram} \n              width={HIST_WIDTH} \n              height={HIST_HEIGHT} \n              style={{backgroundColor: \"#FFFFFF\", cursor:'crosshair'}} \n            />\n          </div>  \n          <div style={styleCanvasGradient}>\n            <canvas ref={this.canvasGradient} width={HIST_WIDTH} height={10} style={{backgroundColor: \"#FFFFFF\"}} />\n          </div>\n          <div style={styleSlider}>\n            <Slider\n              value={this.state.value}\n              onChange={this.handleChangeValue}\n              aria-labelledby=\"continuous-slider\"\n              color=\"secondary\"\n              min={0}\n              max={255}\n            />\n          </div>\n          <div>\n            <table style={styleTable}>\n              <tbody>\n                <tr>\n                  <td style={styleTableTd}>min:</td>\n                  <td style={styleTableTd}>{this.state.minHist}</td>\n                  <td style={styleTableTd}>max:</td>\n                  <td style={styleTableTd}>{this.state.maxHist}</td>\n                </tr>\n                <tr>\n                  <td>mean:</td>\n                  <td>{parseFloat(this.state.mean).toFixed(3)}</td>\n                  <td>std dev:</td>\n                  <td>{parseFloat(this.state.stdDev).toFixed(3)}</td>\n                </tr>\n                <tr>\n                  <td>count:</td>\n                  <td>{this.state.histCount}</td>\n                  <td>value:</td>\n                  <td>{parseFloat(this.state.valueScale).toFixed(3)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n      </div>\n      )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    activeDcmIndex: state.activeDcmIndex,\n    activeDcm: state.activeDcm,\n  }\n}\n\nexport default connect(mapStateToProps)(Histogram)\n"]},"metadata":{},"sourceType":"module"}